===========
ADC
===========

简介
=====
芯片内置一个12 bits 的逐次逼近式模拟数字转换器（ADC），支持 12 路外部模拟输入和若干内部模拟信号选择。
ADC可以工作在单次转换和多通道扫描两种模式下，转换结果为12/14/16 bits 左对齐模式。ADC拥有深度
为32的FIFO，支持多种中断，支持DMA操作。ADC除了用于普通模拟信号测量外，还可以用于测量供电电压，
此外ADC还可以通过测量内/外部二极管电压用于温度检测。

主要特点
===========

- 高性能

    + 可以选择12-bit, 14-bit, 16-bit转换结果输出
    + ADC转换时间最快0.5us（12-bit转换结果)
    + 支持1.8V，3.3V可选参考电压
    + 支持DMA将转换结果搬运到内存
    + 支持单通道转换和多通道扫描两种模式
    + 支持单端与差分两种输入模式
    + 支持抖动补偿
    + 支持用户自行设定转换结果偏移值
    + 扫描模式时钟最大支持1M，非扫描模式支持2M

- 模拟通道数

    * 12 个外部模拟通道
    * 2 个DAC内部通道
    * 1 个VBAT/2通道
    * 1 个TSEN通道

功能描述
===========

ADC模块基本框图如图所示。

.. figure:: ../../picture/ADCBasicStruct.svg
   :align: center

   ADC基本框图

ADC 模块包含五大部分，分别为前端输入通道选择器，程控放大器，ADC采样模块，数据处理模块以及FIFO。

输入通道选择器用于选择需要采样的通道，既包含外部模拟信号，也包含内部模拟信号。

程控放大器用于对输入信号做进一步处理，根据输入信号的特点（直流/交流）进行设定，以便得到更准确的转换值。

ADC 采样模块是最主要的功能模块，实现通过逐次比较的方式，得到模拟信号到数字信号的转换，转换结果为 12 bit。

数据处理模块负责将转换的结果进一步处理，包括添加通道信息等步骤。

最后得到的数据会推送到最后端的FIFO中。

ADC 引脚和内部信号
--------------------------

.. table:: ADC内部信号 

    +----------+-----------------+-----------------------------------------+
    | 内部信号 |    信号类型     |        信号描述                         |
    +==========+=================+=========================================+
    |   VBAT/2 |     Input       | 从电源引脚分压过来的电压信号            |
    +----------+-----------------+-----------------------------------------+
    |   TSEN   |     Input       | 内部温度传感器输出电压                  |
    +----------+-----------------+-----------------------------------------+
    |   VREF   |     Input       | 内部模拟模块参考电压                    |
    +----------+-----------------+-----------------------------------------+
    | DACOUTA  |     Input       | DAC模块输出                             |
    +----------+-----------------+-----------------------------------------+
    | DACOUTB  |     Input       | DAC模块输出                             |
    +----------+-----------------+-----------------------------------------+


.. table:: ADC外部引脚 

    +----------+-----------------+-----------------------------------------+
    | 外部引脚 |    信号类型     |        信号描述                         |
    +==========+=================+=========================================+
    |   VDDA   |     Input       | 模拟模块供电电压正极                    |
    +----------+-----------------+-----------------------------------------+
    |   VSSA   |     Input       | 模拟模块供电地                          |
    +----------+-----------------+-----------------------------------------+
    | ADC_CHX  |     Input       | 模拟输入引脚，总共12路                  |
    +----------+-----------------+-----------------------------------------+


ADC通道
-------------
ADC采样的可以选择的通道包括外部模拟引脚的输入信号和芯片内部可选信号，具体包括：

- ADC CH0
- ADC CH1
- ADC CH2
- ADC CH3
- ADC CH4
- ADC CH5
- ADC CH6
- ADC CH7
- ADC CH8
- ADC CH9
- ADC CH10
- ADC CH11
- DAC OUTA
- DAC OUTB
- VBAT/2
- TSEN
- VREF
- GND

需要注意的是，如果选择VBAT/2或TSEN作为输入待采信号，需要把 gpadc_vbat_en 或gpadc_ts_en置位。
ADC模块可以支持单端输入或者差分输入，如果是单端输入模式，负极输入通道需要选择GND。

ADC时钟
-------------

ADC模块的工作时钟来源如下图所示。

.. figure:: ../../picture/ADCClock.svg
   :align: center
   
   ADC时钟

ADC的时钟源可以选择来自PLL的96M，XTAL或者内部RC32M，时钟源的选择在GLB模块中设定，同时GLB模块也提供了
时钟分频，默认情况下，ADC的时钟源是96M，时钟分频是2，到达ADC模块的时钟是32M。
在ADC模块内部，提供了一个时钟分频，默认16分频，故ADC模块内部的时钟默认是2M。用户可以根据实际采样需求，
自行调整ADC的时钟源和各个分频系数。
gpadc_32m_clk_div分频寄存器宽度为6bits，最大分频为64，分频公式为fout=fsource/(gpadc_32m_clk_div+1)。
gpadc_clk_div_ratio分频寄存器位于ADC模块内部，宽度为3bits,其分频值定义如下：

- 3'b000: div=1
- 3'b001: div=4
- 3'b010: div=8
- 3'b011: div=12
- 3'b100: div=16
- 3'b101: div=20
- 3'b110: div=24
- 3'b111: div=32

ADC转换模式
-------------

ADC支持单通道转换和扫描转换两种模式。

- 单通道转换模式
  
  * 通过设置 gpadc_reg_cmd 寄存器的<gpadc_pos_sel>选择正极输入通道，<gpadc_neg_sel>选择负极输入通道
  * 将 gpadc_reg_config1 寄存器的<gpadc_cont_conv_en>控制位设置为0，表示单通道转换，
然后设置gpadc_conv_start控制位启动转换即可。


在扫描转换模式下，gpadc_cont_conv_en控制位需要设置为1，ADC根据gpadc_scan_length控制位设定的转换通道个数，
依次按照gpadc_reg_scn_posX(X=1，2）和gpadc_reg_scn_negX(X=1，2）寄存器组所设定的通道顺序，逐个进行转换，
转换的结果会自动推入ADC的FIFO。gpadc_reg_scn_posX(X=1，2）和gpadc_reg_scn_negX(X=1，2）寄存器组所设定的
通道可以相同，这也就意味着用户可以实现对一个通道进行多次采样转换。


ADC的转换结果一般都是放入FIFO中。用户需要根据实际转换通道数，设定FIFO接收数据阈值中断，
通过FIFO的阈值中断，作为ADC转换完成中断。

ADC结果
-------------
gpadc_raw_data寄存器存放了ADC的原始结果，在单端模式下，数据有效位是12bits，无符号位，在差分模式下，最高位为符号位，
剩下11bits代表转换的结果。


gpadc_data_out寄存器存放了ADC的结果，这个结果里包含了ADC结果，符号位和通道信息，数据格式如下：


.. table:: ADC转换结果含义

    +-------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    | BitS  |25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10|9 | 8| 7| 6| 5| 4| 3| 2| 1| 0|
    +=======+==+==+==+==+==+==+==+==+==+==+==+==+==+==+==+==+==+==+==+==+==+==+==+==+==+==+
    | 含义  |  正极通道号  |  负极通道号  |                    转换结果                   |
    +-------+--------------+--------------+-----------------------------------------------+

转换结果的bit21-bit25是正极通道号，bit16-bit20是负极通道号，bit0-bit15是转换的数值。

gpadc_res_sel控制位可以设定转换结果的位数为12位，14位，和16位，其中14位和16位是多次采样提高精度得到的结果，
其可以设置的值如下：

- 3'b000    12bit 2MS/s, OSR=1 
- 3'b001    14bit 125kS/s, OSR=16
- 3'b010    14bit 31.25kS/s, OSR=64 
- 3'b011    16bit 15.625KS/s, OSR=128
- 3'b100    16bit 7.8125KS/s, OSR=256

ADC转换结果为左对齐模式，当选择12位时，转换结果的bit15-bit4有效，当选择14位时，转换结果的bit15-bit2有效，当选择16位时，转换结果的bit15-bit0有效。
同样，在差分模式下，最高位是符号位，也就是，当选择14位时，bit15是符号位，bit14-bit2是转换结果，bit14是MSB,
在单端模式下，没有符号位，也就是，当选择12位时，bit15-bit4是转换结果，bit15是MSB。

在实际使用中，ADC的结果一般都是放入FIFO，这在多通道扫描模式下尤为重要，所以用户一般都是从ADC FIFO获取转换结果，
ADC FIFO的数据格式gpadc_data_out寄存器中数据格式相同。

ADC中断
-------------
ADC模块在正极采样超量程和负极采样超量程时可以产生中断，可以通过gpadc_pos_satur_mask，gpadc_neg_satur_mask屏蔽各自中断，
当中断产生时，可以通过gpadc_pos_satur，和gpadc_neg_satur寄存器查询中断状态，同时可以通过gpadc_pos_satur_clr和gpadc_neg_satur_clr清除中断。该功能可以用来判断输入电压是否异常。

ADC FIFO
-------------

ADC模块拥有深度为32的FIFO，数据宽度为26bits，当ADC完成转换后，会自动将结果推入到FIFO。ADC的FIFO有如下状态和中断管理功能：

- FIFO满状态
- FIFO非空状态
- FIFO Overrun中断
- FIFO Underrun中断

当中断产生时，可以通过对应的clear位将中断标志清除掉。


利用ADC的FIFO用户可以实现三种模式获取数据：查询模式，中断模式，DMA模式

**查询模式**

CPU轮询gpadc_rdy位，当该控制位置位时，说明FIFO中存在有效数据，CPU可以根据gpadc_fifo_data_count获知
FIFO数据个数并从FIFO读出这些数据。

**中断模式**

CPU设置gpadc_rdy_mask为0，ADC就会在FIFO有数据推入的时候产生中断，用户可在中断函数中，根据gpadc_fifo_data_count获知
FIFO数据个数并从FIFO读出这些数据，然后设置gpadc_rdy_clr清除中断。

**DMA模式**

用户设定gpadc_dma_en控制位，可以配合DMA完成转换数据到内存的搬运，在使用DMA模式时，通过gpadc_fifo_thl设置ADC FIFO发送
DMA请求的数据个数阈值，DMA在收到请求时，会自动根据用户设定的参数，从FIFO搬运指定个数的结果到对应的内存。


ADC设置流程
-------------

**设置ADC时钟**

根据ADC转换速度需求，确定ADC的工作时钟，设定GLB模块的ADC时钟源和分频，结合gpadc_clk_div_ratio，确定最终ADC模块的工作时钟频率。

**根据使用的通道设置GPIO**

根据使用的模拟引脚，确定使用的通道号，初始化对应的GPIO为模拟功能，需要注意的是，在设定GPIO为模拟输入的时候，不要设置GPIO的上拉
或者下拉，需要设置为浮空输入。

**设定要转换的通道**

根据使用的模拟通道和转换模式，设定对应的通道寄存器，对于单通道转换，在gpadc_pos_sel和gpadc_neg_sel寄存器中设置转换的通道信息。
对于多通道扫描模式，根据要扫描通道数目和扫描顺序，设定gpadc_scan_length,gpadc_reg_scn_posX和gpadc_reg_scn_negX。

**设定数据读取方式**

根据ADC FIFO介绍的读取数据方式，选择使用的模式，设置对应的寄存器。如果使用DMA，同样需要配置DMA的一个通道，配合ADC FIFO完成数据的搬运。

**启动转换**

最后设置gpadc_res_sel选择数据转换结果的精度，最后设置gpadc_global_en=1，gpadc_conv_start=1就可以启动ADC开始转换。
当转换完成，需要再次转换时，需要将gpadc_conv_start设置为0，再设置为1，以便再次触发转换。


VBAT测量
-------------
这里的VBAT/2测量的是芯片VDD33的电压，而不是外部的比如锂电池的电压，如果需要测量锂电池等供电源头的电压，
可以将电压分压，然后输入ADC的GPIO模拟通道，测量VDD33的电压可以减少GPIO的使用。


ADC模块测量的VBAT/2电压是经过分压的，实际输入到ADC模块的电压是VDD33的一半，即VBAT/2=VDD33/2。由于电压经过分压，
为了得到较高的精确度，建议ADC的参考电压选择1.8V，采用单端模式，正极输入电压选择VBAT/2，负极输入电压选择GND，
同时将Gpadc_vbat_en设置为1，启动转换后，将对应的转换结果乘以2就可以得到VDD33电压。

TSEN测量
-------------
ADC可以测量内部二极管或者外部二极管电压值，而二极管的压差和温度有关，所以通过测量二极管的电压，可以计算得到环境温度，
我们称之为Temperature Sensor，简称TSEN。

TSEN的测试原理是通过一个二极管上面测量两次不同大小的电流产生的电压差ΔV 随着温度的变化拟合的曲线，无论外部或者内部二极管的测量，
最终输出的值和温度有关，都可以表示成Δ(ADC_out)=7.753T+X，当我们知道了电压值，也就知道了温度T。这里的X是一个偏移值，可以作为标准值，
在实际使用前，我们需要确定X。芯片厂商会在芯片出厂前，在标准温度下，例如室温25度，测量Δ(ADC_out)，从而得到X。
在用户使用的时候，只要根据公式T=[Δ(ADC_out)-X]/7.753，就可以得到温度T。


在使用TSEN时，建议把ADC设置成16bits模式，通过多次采样以减少误差，参考电压选择1.8V以提高精度，设置gpadc_ts_en为1以便启动TSEN功能，
如果选择内部二极管，gpadc_tsext_sel=0，如果选择外部二极管，gpadc_tsext_sel=1，根据实际情况选择正向输入通道，如果是内部二极管，
选择TSEN通道，如果是外部，选择对应的模拟GPIO通道，负极输入端选择GND。在上述设定完毕后，设置gpadc_tsvbe_low=0，启动测量，
得到测量结果V0,再设置gpadc_tsvbe_low=1，启动测量，得到测量结果V1,Δ(ADC_out)=V1-V0，根据公式T=[Δ(ADC_out)-X]/7.753，得到温度T。

.. only:: html

   .. include:: adc_register.rst

.. raw:: latex

   \input{../../zh_CN/content/adc}

