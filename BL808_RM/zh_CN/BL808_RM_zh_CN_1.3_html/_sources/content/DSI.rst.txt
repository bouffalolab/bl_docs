===========
DSI
===========

简介
=====
DSI是显示串行接口(Display Serial Interface)的简称，是MIPI联盟定义的用于与显示屏通信的接口协议。
它向外设发送像素或命令，并可从外设读取状态或像素信息。DSI在高速模式下所有的数据通道都是单向传输，低速模式下只有第一个数据通道是双向传输，其他通道为单向传输。
时钟通道专用于在高速传输数据的过程中传输同步时钟信号。另外，一个主机端还允许同时与多个从属端进行通信。本芯片内置了DSI控制器和D-PHY，可以实现与DSI兼容显示屏进行通信，从而将数据显示在屏幕上。

主要特点
===========

 - 符合 MIPI® 联盟标准
 - MIPI® D-PHY 接口 ,最高速度可达800Mbps
 - 1条 Clock Lane,最多支持4条Data Lane
 - Data Lane支持四种排列顺序
 - 支持Ultra Low Power Mode和High Speed Mode
 - Data Lane 0支持双向通信和逃逸模式
 - Escape模式支持LPDT/ULPS/Trigger
 - LPDT模式下支持长包和短包的发送
 - 支持ECC和校验功能
 - 支持数据长度错误和数据溢出错误中断
 - 支持命令模式和视频模式
 - 视频模式下支持Event和Pulse模式
 - 显示接口支持的数据格式包括：

     + YUV422, 8-bit
     + RGB565
     + RGB666, loosely packed
     + RGB888

 - 丰富多样的中断机制和状态查询
 - LPDT模式下支持DMA传输
 - 可与OSD配合使用

功能描述
===========

DSI模块基本框图如下图所示：

.. figure:: ../../picture/DSIBlock.svg
   :align: center

   DSI基本框图

DSI协议分层
----------------
DSI协议总共可分为4层，从下往上依次是物理层、通道管理层、协议层和应用层，如下图所示：

.. figure:: ../../picture/DSILayer.svg
   :align: center

   协议分层

物理层：物理层规定了传输介质(电导体)、输入/输出电路以及从串行位流捕获“1”和“0”的时钟机制。
另外还规定了发送开始(SoT)和发送结束(EoT)的信令机制，以及可在发送和接收PHY之间传输的其他“带外”信息。

通道管理层：DSI可扩展通道以提高性能，根据应用的带宽要求，数据通道的数量可以是1、2、3或4。
通道管理层的作用是在发送端将需要发送的数据按照通道次序分组输送到相应的数据通道，在接收端从各个通道收集数据后将它们合并到一个重新组合的数据流中，从而恢复出原始流序列。

协议层：DSI协议定义了数据包格式，包括短数据包和长数据包。协议层的作用是在发送端根据数据的类型和内容进行组包，完成ECC码和CRC码的添加并传输到通道管理层；
在接收端根据ECC码和CRC码对收到的数据包进行检错纠错，完成对包头和数据内容的译码并传输到应用层。

应用层：根据应用模块的需要，应用层在发送端对要发送的命令和数据进行初步编码转化为DSI所规定的格式，在接收端将接收的数据还原为应用模块支持的数据格式和时序要求。

物理层
----------
按照D-PHY协议，物理层中在主机端和从属端之间采用的是同步连接，时钟通道(Clock Lane)用于传送高速时钟，一个或多个数据通道(Data Lanes)用于传送低功耗数据信号或高速数据信号。每一个通道
都是利用两根互连线实现主机端和从属端的连接，且都支持高速(HS)模式和低功耗(LP)模式。在高速模式下，发送端同时驱动该通道的两根互连线，输出低摆幅差分信号，例如200mV；
在低速模式下，发送端会分别驱动互连线，各自输出摆幅相对较大的单端信号，例如1.2V。两种模式下的互连线电平如下图所示：

.. figure:: ../../picture/DSILevel.svg
   :align: center

   高速和低功耗模式下的电平

互连线两端是驱动单元和接收单元。驱动单元包括差分发送模块(HS_TX)和低功耗单端发送模块(LP_TX),接收单元包括差分接收模块(HS_RX)和低功耗单端接收模块(LP_RX)。
差分发送模块(HS_TX)以差分信号驱动互连线，高速通道上呈现两种状态：Differential-0和Differential-1。
低功耗单端发送模块(LP_TX)独立地驱动两根互连线，通道上有四种不同的状态：LP-00、LP-01、LP-10和LP-11。
协议针对线路电平作了具体的定义并设置了三种操作模式：高速模式、控制模式和Escape模式，如下表所示：

.. figure:: ../../picture/DSILaneState.svg
   :align: center

   通道状态码

时钟通道(Clock Lane)
----------------------
时钟通道可以被驱动到三种不同的功耗模式：低功耗模式(Low Power Mode，LPM)、超低功耗模式(Ultra-Low Power Mode，ULPM)和高速时钟模式(High Speed Clock Mode，HSCM)。
时钟通道不同功耗模式相互切换的主要流程图如下所示：

.. figure:: ../../picture/DSIClockMode.svg
   :align: center

   时钟通道模式切换图

低功耗模式(LPM，LP-11)
*************************
有三种方式进入：

1.在软件复位、硬件复位和上电时序后，自动进入LP-11(LPM)。

2.离开超低功耗模式(ULPM，LP-00)后先变为LP-10，再进入LP-11(LPM)，如下图所示：

.. figure:: ../../picture/DSIULPM2LPM.svg
   :align: center

   由超低功耗模式进入低功耗模式

3.离开高速时钟模式(HSCM，HS-0或HS-1)后先变为HS-0，再进入LP-11(LPM)，如下图所示：

.. figure:: ../../picture/DSIHSCM2LPM.svg
   :align: center

   由高速时钟模式进入低功耗模式

超低功耗模式(ULPM，LP-00)
***************************
只有一种方式进入：
从低功耗模式(LPM，LP-11)先变为LP-10，再进入LP-00(ULPM)，如下图所示：

.. figure:: ../../picture/DSILPM2ULPM.svg
   :align: center

   由低功耗模式进入超低功耗模式

高速时钟模式(HSCM，HS-0/1)
****************************
只有一种方式进入：
从低功耗模式(LPM，LP-11)先变为LP-01，再变为LP-00，然后变为HS-0，之后进入HS-0/1(HSCM)，如下图所示：

.. figure:: ../../picture/DSILPM2HSCM.svg
   :align: center

   由低功耗模式进入高速时钟模式

数据通道(Data Lanes)
------------------------
所有的数据通道(D3P/N、D2P/N、D1P/N和D0P/N)都可以被驱动到高速数据传输(High-Speed Data Transmission，HSDT)模式，但只有数据通道0(D0P/N)可以进入Escape模式和Bus Turn-Around Request(BTA)模式。
三种模式的进入和退出序列如下表所示：

.. figure:: ../../picture/DSIDataMode.svg
   :align: center

   数据通道三种模式进入和退出序列

高速数据传输(HSDT)
**********************
当MCU的时钟通道已经进入高速时钟模式(HSCM)后显示模块可以进入高速数据传输(HSDT)。进入高速数据传输的序列如下图所示：

.. figure:: ../../picture/DSIHSDTStart.svg
   :align: center

   高速数据传输进入序列

序列：

 - 开始：LP-11；
 - HS请求：LP-01；
 - HS确定：LP-00=>HS-0(接收端:Lane终端使能)
 - 接收端同步：011101(按发送的bit顺序)，发送端同步：00011101(按发送的bit顺序)；
 - 结束：高速数据传输，准备好接收加载的高速数据。

当MCU的时钟通道处于高速时钟模式(HSCM)时显示模块可以退出高速数据传输，并且HSCM必须保持到所有的数据通道都进入LP-11模式。退出高速数据传输的序列如下图所示：

.. figure:: ../../picture/DSIHSDTEnd.svg
   :align: center

   高速数据传输退出序列

序列：

 - 开始：高速数据传输；
 - 停止高速数据传输：如果最后的加载位是HS-0则MCU变为HS-1,如果最后的加载位是HS-1则MCU变为HS-0；
 - 结束：LP-11(接收端：Lane终端禁用)。

高速数据传输的突发操作可以由一个数据包或者多个数据包组成，这些数据包可以是长包也可以是短包。以下是一些不同的高速数据传输突发例子：

.. figure:: ../../picture/DSIHSDTBurst.svg
   :align: center

   高速数据传输突发序列

Bus Turn-Around(BTA)
*************************
当正在控制通道D0P/N的MCU或显示模块想要从接收端获取信息时，可以开启一个总线反转过程，使总线控制权发生反转。
MCU和显示模块发起总线反转过程使用相同的序列，如下图所示：

.. figure:: ../../picture/DSIBTA.svg
   :align: center

   总线反转序列

序列：

 - 开始：LP-11；
 - 反转请求(MCU)：LP-11=>LP-10=>LP-00=>LP-10=>LP-00；
 - MCU会等待直到显示模块开始控制通道D0P/N，而MCU则停止控制通道D0P/N并设为高阻态；
 - 显示模块变为停止模式：LP-00=>LP-10=>LP-11。

Escape模式
*************
Escape模式是LPM下的一种特殊模式，有以下几个作用：

 - 1.从MCU发送低功耗传输(LPDT)命令到显示模块；
 - 2.驱动数据通道到超低功耗状态(ULPS)；
 - 3.发送远程复位(RAR)命令，复位显示模块；
 - 4.发送应答(ACK)信号，用于从显示模块传输非错误事件到MCU。

Escape模式的基本序列如下图所示：

.. figure:: ../../picture/DSIEscape.svg
   :align: center

   Escape模式序列

序列：

 - 开始：LP-11；
 - Escape模式进入(EME)：LP-11=>LP-10=>LP-00=>LP-01=>LP-00；
 - Escape命令(EC)：当其中一个数据通道从低变高再变低时，此变化显示了当前数据位的值(D0P = 1，D0N = 0)。
 - 当数据通道0从低变高再变低，接收器会锁存1bit数据，即逻辑0。接收器会把这种从低变高再变低的传输作为
 - 其内部的时钟；
 - 如果需要的话，加载数据；
 - 退出Escape：LP-00=>LP-10=>LP-11；
 - 结束：LP-11。

Escape命令种类如下表所示：

.. figure:: ../../picture/DSIEscapeCommand.svg
   :align: center

   Escape模式命令


低功耗数据传输(LPDT)
*************************
当数据通道进入Escape模式，并且MCU已经将LPDT命令发送给显示模块，则MCU可以在低功耗模式下将数据发送到显示模块。
显示模块发送数据到MCU时也使用同样的序列。LPDT序列如下图所示：

.. figure:: ../../picture/DSILPDT.svg
   :align: center

   低功耗数据传输序列

序列：

 - 开始：LP-11；
 - Escape模式进入(EME)：LP-11=>LP-10=>LP-00=>LP-01=>LP-00；
 - Escape模式下发送LPDT命令：0x87(LSB-first)；
 - 加载数据：一个或多个字节，当数据通道在字节之间停止(所有通道都为低)时，处于暂停状态；
 - 退出Escape：LP-00=>LP-10=>LP-11；
 - 结束：LP-11。

超低功耗状态(ULPS)
***********************
当数据通道进入Escape模式时，MCU可以强制数据通道进入超低功耗状态。ULPS序列如下图所示：

.. figure:: ../../picture/DSIULPS.svg
   :align: center

   超低功耗状态序列

序列：

 - 开始：LP-11；
 - Escape模式进入(EME)：LP-11=>LP-10=>LP-00=>LP-01=>LP-00；
 - Escape模式下发送ULPS命令：0x78(LSB-first)；
 - 超低功耗状态，MCU保持数据通道为低；
 - 退出Escape：LP-00=>LP-10=>LP-11；
 - 结束：LP-11(数据通道退出ULPS之后必须等待100us才能发送下一条命令)。

远程复位(RAR)
***************
远程复位是Trigger命令中的一种，当数据通道进入Escape模式时，MCU可以通知显示模块在远程申请复位触发器中进行复位。RAR序列如下图所示：

.. figure:: ../../picture/DSIRAR.svg
   :align: center

   远程复位序列

序列：

 - 开始：LP-11；
 - Escape模式进入(EME)：LP-11=>LP-10=>LP-00=>LP-01=>LP-00；
 - Escape模式下发送RAR命令：0x46(LSB-first)；
 - 退出Escape：LP-00=>LP-10=>LP-11；
 - 结束：LP-11。

应答(ACK)
************
应答是Trigger命令中的一种，显示模块可以通过ACK通知MCU有未识别的错误。显示模块发送ACK的序列如下图所示：

.. figure:: ../../picture/DSIACK.svg
   :align: center

   应答序列

序列：

 - 开始：LP-11；
 - Escape模式进入(EME)：LP-11=>LP-10=>LP-00=>LP-01=>LP-00；
 - Escape模式下发送ACK命令：0x84(LSB-first)；
 - 退出Escape：LP-00=>LP-10=>LP-11；
 - 结束：LP-11

通道管理层
-----------------
DSI是一种通道可扩展接口，按照实际应用的带宽需求可能会将数据通道从一条扩展为两条、三条或者四条，并获得峰值总线带宽的近似线性增加。
在发射端，通道管理层的作用是把协议层的数据按照一定的顺序分发到每个数据通道上；在接收端，通道管理层的作用是从各个通道收集传输的字节，并将字节合并成完整的数据包。
所有的数据通道共用一个时钟信号，但每个通道不一定是同时传输完成的，当传输的字节数不是通道数的整数倍时，某些通道会在其他通道之前传完数据。
除通道0之外，其他三条通道的排列顺序可以通过<CR_LANE_MUX_SEL>配置。

有以下四种排列顺序：

 - Lane0,Lane1,Lane2,Lane3
 - Lane0,Lane3,Lane1,Lane2
 - Lane0,Lane2,Lane3,Lane1
 - Lane0,Lane2,Lane1,Lane3

分别以单通道和四通道(顺序为Lane0,Lane1,Lane2,Lane3)为例，发送端如下图所示：

.. figure:: ../../picture/DSILaneDistributor.svg
   :align: center

   发送端拆分

接收端如下图所示：

.. figure:: ../../picture/DSILaneMerger.svg
   :align: center
   :scale: 90%

   接收端组合

通道分配器接受任意字节长度的HS传输，缓冲N个字节，其中N是接口中实现的通道数，并在N个通道上并行发送N个字节组。
在发送数据之前，所有通道并行执行SoT序列，以向其对应的接收单元指示数据包的第一个字节开始。
SoT之后，通道通过循环过程从第一个数据包并行发送N字节组，对于四通道系统，数据包的字节0进入通道0，字节1进入通道1，字节2进入通道2，字节3进入通道3，字节4进入通道0，依此类推。
由于HS传输由任意数量的字节组成，这些字节可能不是通道的整数倍，因此某些通道可能会在其他通道之前先发完数据。
尽管所有通道均以并行SoT同时启动，但每条通道独立运行，可在其他通道之前完成HS传输，提前一个字节发送EoT。如下图所示：

.. figure:: ../../picture/DSINotMultiple.svg
   :align: center

   非通道整数倍传输

协议层
-------------
DSI是一个基于数据包传送的通信协议，MCU和显示模块之间传送的命令和数据基本上都是以数据包格式进行。
DSI所定义的数据包有两种：短数据包(SPa)和长数据包(LPa)。数据包的类型(SPa或LPa)可以从它们的包头(PH)中识别出来。

短数据包
************
短数据包由一个8-bit数据标识(DI)、两个字节命令或数据和一个8-bit ECC组成。包括ECC在内，短数据包的长度为4字节。
短数据包主要用于大多数命令模式命令和相关参数，另外还用来传递诸如H同步和V同步边缘之类的事件。因为长度较短，所以可以准确地将定时信息传送到外围逻辑。短数据包结构如下图所示：

.. figure:: ../../picture/DSISpa.svg
   :align: center

   短数据包结构图

其中：

 - LP-11：低功率-停止状态
 - SoT：传输开始
 - DI：8-bit，数据标识
 - Data 0：8-bit，包数据0
 - Data 1：8-bit，包数据1
 - ECC：8-bit，纠错码
 - EoT：传输结束

长数据包
************
长数据包由32-bit数据包头(PH)、具有可变字节数的数据有效负载和16-bit数据包尾(PF)组成。其中包头可分为8-bit数据标识、16-bit字计数(WC)和8-bit ECC。
由于记录有效负载长度的WC为两个字节，取值范围为0到65535，因此长数据包的长度范围是6到65541个字节。长数据包主要用于传输大量图像数据或部分控制命令。长数据包结构如下图所示：

.. figure:: ../../picture/DSILpa.svg
   :align: center

   长数据包结构图

其中：

 - LP-11：低功率-停止状态
 - SoT：传输开始
 - DI：8-bit，数据标识
 - WC：16-bit，字计数
 - ECC：8-bit，纠错码
 - Data 0，Data 1...：数据包数据(0~65535字节)
 - CS：16-bit，校验和
 - EoT：传输结束

每次传输多个数据包
********************
在上面短数据包和长数据包结构图中，传输只包含了一个分组。对于多个数据包，如果每次传输都只发送一个数据包，LPS和高速模式之间频繁切换的开销将严重限制带宽。
DSI协议允许将多个数据包连接起来发送，数据包之间不需要SoT、EoT和LP-11，如下图所示：

.. figure:: ../../picture/DSISpaLpa.svg
   :align: center
   :scale: 80%

   一次传输多个数据包

数据包字节的位顺序
********************
在数据包中使用的字节的位顺序是首先发送字节的最低有效位(LSB)，最后发送最高有效位(MSB)，下图是一个例子：

.. figure:: ../../picture/DSIBitOrder.svg
   :align: center

   数据包字节的位顺序


数据包的字节顺序
********************
在数据包中使用的多字节信息的字节顺序是首先发送信息的最低有效(LS)字节，最后发送最高有效(MS)字节。例如字计数(WC)由2个字节组成，首先发送LS字节，然后发送MS字节，如下图所示：

.. figure:: ../../picture/DSIByteOrder.svg
   :align: center

   数据包的字节顺序

数据包头(PH)
**************
数据包头始终由4个字节组成，对于短数据包和长数据包，这4个字节的内容有所不同。短数据包包括：1个字节的数据标识(DI)、2个字节的数据包数据(PD0、PD1)和1个字节的纠错码(ECC)。
长数据包包括：1个字节的数据标识(DI)、2个字节的字计数(WC)和1个字节的纠错码(ECC)。

数据标识(DI)
**************
数据标识是数据包头(PH)的一部分，它由两个部分组成：

 - 虚拟通道(VC)，2-bit，DI[7:6]
 - 数据类型(DT)，6-bit，DI[5:0]

虚拟通道(VC)
**************
虚拟通道是数据标识(DI[7:6])结构的一部分，用于确定MCU数据包发往的位置。
虚拟通道可以为4个不同的显示模块分配4个不同的通道，各个显示模块将使用与MCU用于向其发送数据包的虚拟通道相同的虚拟通道。

数据类型(DT)
**************
数据类型是数据标识(DI[5:0])结构的一部分，用于定义数据包是长数据包类型还是短数据包类型以及数据包格式。其中从MCU到显示模块的数据类型的定义如下表所示：

.. figure:: ../../picture/DSIDTMCU.svg
   :align: center

   从 MCU到显示模块的数据类型

从显示模块到MCU的数据类型的定义如下表所示：

.. figure:: ../../picture/DSIDTDisp.svg
   :align: center

   从显示模块到 MCU的数据类型

包数据(PD)
**************
对于短数据包，包数据是数据包头的一部分，位于数据标识之后，固定2个字节，即数据0和数据1。包数据的发送顺序是先发送数据0，再发送数据1。
如果信息长度为1个字节，则数据1的值为0。对于长数据包，包数据位于数据包头之后，字节长度由字计数(WC)确定。

字计数(WC)
**************
字计数是长数据包包头的一部分，位于数据标识之后，用于确定长数据包的包数据(PD)部分的总字节数。字计数固定为2个字节，发送顺序是先发送最低有效字节，再发送最高有效字节。

纠错码(ECC)
**************
纠错码是数据包头的一部分，可以识别一个或多个错误，并且只能纠正一个错误。
ECC保护以下字段：
- 短数据包：DI(8-bit)、PD(16-bit)和ECC(8-bit)
- 长数据包：DI(8-bit)、WC(16-bit)和ECC(8-bit)
以短数据包为例，ECC各个位的计算方法如下图所示(“^”表示异或运算)：

.. figure:: ../../picture/DSIECC.svg
   :align: center

   ECC计算示例

公式：

 - ECC[7] = 0
 - ECC[6] = 0
 - ECC[5] = D10^D11^D12^D13^D14^D15^D16^D17^D18^D19^D21^D22^D23
 - ECC[4] = D4^D5^D6^D7^D8^D9^D16^D17^D18^D19^D20^D22^D23
 - ECC[3] = D1^D2^D3^D7^D8^D9^D13^D14^D15^D19^D20^D21^D23
 - ECC[2] = D0^D2^D3^D5^D6^D9^D11^D12^D15^D18^D20^D21^D22
 - ECC[1] = D0^D1^D3^D4^D6^D8^D10^D12^D14^D17^D20^D21^D22^D23
 - ECC[0] = D0^D1^D2^D4^D5^D7^D10^D11^D13^D16^D20^D21^D22^D23


数据包尾(PF)
**************
数据包尾是长数据包的一部分，位于包数据(PD)之后。包尾是根据长数据包的包数据计算的校验和，该校验和是使用由多项式X16+X12+X5+X0生成的16位循环冗余校验(CRC)值，如下图所示：

.. figure:: ../../picture/DSICRC.svg
   :align: center

   CRC计算方法

16位循环冗余校验(CRC)发生器在计算前的初始值为0xFFFF，包数据最低有效位(LSB)是输入CRC的第一位，下图是以数据0x01为例，进行CRC计算的步骤说明：

.. figure:: ../../picture/DSICRCCal.svg
   :align: center

   CRC计算示例

应用层
-------------
该层描述数据流中包含的数据的更高级编码和解释。取决于显示子系统架构，它可以由具有规定格式的像素或编码比特流，或者由显示模块内的显示控制器解释的命令组成。
DSI规范描述了像素值、比特流、命令和命令参数到数据包组件中字节的映射。(具体内容见显示命令集(DCS)规范，DCS规范不在本文档介绍范围内)

命令模式
-------------
命令模式是指以发送命令和数据的形式实现MCU与包含显示控制器的外围设备(如显示模块)的交互。显示控制器可以包括本地寄存器和压缩或未压缩帧缓冲器，使用命令模式的系统对寄存器和帧缓冲存储器进行写入和读取。
MCU通过向显示控制器发送命令、参数和数据，间接控制外围设备的活动。MCU还可以读取显示模块状态信息或帧存储器的内容。命令模式需要双向接口。

视频模式
-------------
视频模式是指以实时像素流的形式从MCU传输到外围设备的操作。显示模块依靠MCU以足够的带宽提供图像数据，以避免显示图像中的闪烁或其他可见伪影。视频信息只能使用高速模式传输。
视频模式又可以分为三种模式：具有同步脉冲的非突发模式(Non-Burst Mode with SYNC Pulses)、具有同步事件的非突发模式(Non-Burst Mode with SYNC Events)和突发模式(Burst Mode)。
这三种模式有着不同的数据包序列，外围设备的定时要求决定了哪种模式是合适的。

具有同步脉冲的非突发模式(Non-Burst Mode with SYNC Pulses)
***********************************************************
该模式使外围设备能够准确重建原始视频定时，包括同步脉冲宽度。使用这种模式，目标是通过DSI串行链路准确地传送DPI类型的定时，这包括匹配的DPI像素传输速率和同步脉冲等定时事件的宽度。
因此，使用发送同步脉冲的开始和结束的数据包来定义同步周期。
此模式的示例如下图所示，其中HSA、HBP和HFP的周期由LP模式中的定时间隔来填充，DSI会在HSA、HBP和HFP开始时从HS切换到LP模式，期间保持LP-11状态，在结束时切换回HS模式：

.. figure:: ../../picture/DSIVideoPulse.svg
   :align: center

   具有同步脉冲的非突发模式时序图

具有同步事件的非突发模式(Non-Burst Mode with SYNC Events)
***********************************************************
该模式与具有同步脉冲的非突发模式类似，但不需要精确重建同步脉冲宽度，因此将同步脉冲替换为单个同步事件，是对上述具有同步事件的非突发模式的简化。
这种模式仅传输每个同步脉冲的开始，外围设备可根据需要从接收到的每个同步事件包中重新生成同步脉冲。像素的传输速率与在相应的并行显示接口(如DPI-2)中的传输速率相同。
此模式的示例如下图所示，其中HSA、HBP和HFP的周期由LP模式中的定时间隔来填充，DSI会在HSA、HBP和HFP开始时从HS切换到LP模式，期间保持LP-11状态，在结束时切换回HS模式：

.. figure:: ../../picture/DSIVideoEvent.svg
   :align: center

   具有同步事件的非突发模式时序图


突发模式(Burst Mode)
***********************
该模式下的像素数据包经过了时间压缩，从而可以在较短时间内完成传输。这种方式降低了总体DSI功耗，并为链路上任何方向的其他数据传输提供更大的时间块。在HS像素数据传输完成之后，总线会进入LP模式。
在此期间，总线可以保持空闲即LP-11状态，或者LP传输可以在任一方向上进行。如果外围设备控制向MCU发送数据的总线，其传输时间应受到限制，以确保数据不会从其内部缓冲存储器流向显示设备。
此模式的示例如下图所示，其中HSA、HBP和HFP的周期由LP模式中的定时间隔来填充，DSI会在HSA、HBP和HFP开始时从HS切换到LP模式，期间保持LP-11状态，在结束时切换回HS模式：

.. figure:: ../../picture/DSIVideoBurst.svg
   :align: center

   突发模式时序图

Line Buffer
----------------
因为前端模块向DSI模块输入数据的速度和DSI输出数据的速度不匹配，所以需要对数据进行缓冲。DSI内部有一个最多可以容纳1280*3个字节的Line Buffer，用于视频模式下对输入DSI模块的数据进行缓存。
用户需要通过<CR_HSTX_OUT_TH>设置一个阈值，对于视频模式下的每行(H-Sync)图像数据，DSI模块在收到其前端模块输入的数据之后不会将数据立即发送出去，而是先缓存在Line Buffer中。
当Line Buffer中缓存的像素点达到设定的阈值时，DSI开始向显示模块发送数据。这样当DSI模块的输入速度大于输出速度时，输入部分来不及发送的数据会先放在Line Buffer中；
而当DSI模块的输入速度小于输出速度时，Line Buffer会先缓存一部分数据，达到阈值后再开始发送，以保证DSI发送整行像素的时间与剩余像素输入的时间相匹配。阈值的具体计算公式如下：

    Threshold = ceil(Width * (1 - Fdp * BPP / Fhs / LN))

其中：

 - ceil()为向上取整；
 - Width为图像一行的像素点数；
 - Fdp为DSI上一级模块(即DSI的数据输入模块dp_dvp_tsrc)的工作时钟；
 - BPP(Byte Per Pixel)为像素格式的字节数，RGB888/RGB666为3，RGB565/YUV422_8为2；
 - LN(Lane Number)为Data Lane的数量；
 - Threshold为所求的阈值，阈值的最小值为6，当计算值小于6时应设置为6。

显示数据格式
-----------------
显示数据格式支持YUV422(8-bit)、RGB565、RGB666(loosely packed)和RGB888四种，在<CR_DT>中进行配置。

YUV422(8-bit)
****************
YUV422(8-bit)格式中一个像素的Y、U、V分量各为8-bit，其中两个像素共用一组UV。YUV422(8-bit)格式的长数据包由一字节DI、两字节非零WC、一字节ECC、长度为WC字节的有效负载和两字节CRC组成。
使用这种格式，像素边界与某些字节边界对齐，WC中的值应为任何可被4整除的非零值。YUV422(8-bit)格式长数据包结构如下图所示：

.. figure:: ../../picture/DSIYUV422.svg
   :align: center

   YUV422像素格式

RGB565
*********
RGB565格式中一个像素的R、G、B分量分别为5-bit、6-bit、5-bit。RGB565格式的长数据包由一字节DI、两字节WC、一字节ECC、长度为WC字节的有效负载和两字节CRC组成。
使用这种格式，像素边界每两个字节与字节边界对齐一次，WC中的值应为2的倍数。RGB565格式长数据包结构如下图所示：

.. figure:: ../../picture/DSIRGB565.svg
   :align: center

   RGB565像素格式

RGB666(loosely packed)
*************************
RGB666(loosely packed)格式中一个像素的R、G、B分量各为6-bit，但会移动到字节的高位，以便有效像素位占据每个字节的位[7:2]，而位[1:0]会被忽略。
因此，每个像素在通道上传输时需要三个字节。RGB666格式的长数据包由一字节DI、两字节WC、一字节ECC、长度为WC字节的有效负载和两字节CRC组成。
使用这种格式，像素边界每三个字节与字节边界对齐一次，WC中的值应为3的倍数。RGB666(loosely packed)格式长数据包结构如下图所示：

.. figure:: ../../picture/DSIRGB666.svg
   :align: center

   RGB666像素格式

RGB888
*********
RGB888格式中一个像素的R、G、B分量各为8-bit。RGB888格式的长数据包由一字节DI、两字节WC、一字节ECC、长度为WC字节的有效负载和两字节CRC组成。
使用这种格式，像素边界每三个字节与字节边界对齐一次，WC中的值应为3的倍数。RGB888格式长数据包结构如下图所示：

.. figure:: ../../picture/DSIRGB888.svg
   :align: center

   RGB888像素格式


中断
-------------
DSI模块拥有丰富的中断控制，包括以下几种：

 - TX Escape命令结束中断
 - RX LPDT结束中断
 - RX ULPS命令中断
 - RX Trigger 0命令中断
 - RX Trigger 1命令中断
 - RX Trigger 2命令中断
 - RX Trigger 3命令中断
 - TX LPDT FIFO请求中断
 - RX LPDT FIFO请求中断
 - Buffer Overrun错误中断
 - Buffer Underrun错误中断
 - 像素过少错误中断
 - 像素过多错误中断
 - FIFO溢出错误中断

TX Escape命令结束中断会在任意Escape命令发送结束时触发；

RX LPDT结束中断、RX ULPS命令中断、RX Trigger 0命令中断、RX Trigger 1命令中断、RX Trigger 2命令中断、RX Trigger 3命令中断分别会在对应的命令发出去之后，收到对方回复的ACK之后触发；

当DSI_FIFO_CONFIG_1中TFICNT大于TFITH时,产生TX FIFO请求中断，当条件不满足时该中断标志会自动清除；

当DSI_FIFO_CONFIG_1中RFICNT大于RFITH时,产生RX FIFO请求中断，当条件不满足时该中断标志会自动清除；

Buffer Overrun错误中断会在Line Buffer Overrun，即进入Line Buffer的数据不能及时送出，Line Buffer被塞满时产生；

Buffer Underrun错误中断会在Line Buffer Underrun，即Line Buffer中的数据被全部读出，新的数据不能及时填入时产生；

像素过少错误中断会在H-Sync期间发送的像素数量比<CR_HSTX_PC>配置值小时产生；

像素过多错误中断会在H-Sync期间发送的像素数量比<CR_HSTX_PC>配置值大时产生；

FIFO溢出错误中断会在TX或者RX发生Overflow或者Underflow时产生。

DMA
-------------
DSI LPDT模式下支持DMA传输模式，使用该模式需要通过寄存器DSI_FIFO_CONFIG_1的位<TFITH>和<RFITH>分别设置TX和RX FIFO的阈值。
当该模式启用后，如果<TFICNT>大于<TFITH>，则会触发DMA TX请求，配置好DMA后，DMA在收到该请求时，会按照设定从内存中将数据搬运到TX FIFO。
如果<RFICNT>大于<RFITH>，则会触发DMA RX请求，配置好DMA后，DMA在收到该请求时，会按照设定将RX FIFO的数据搬运到内存。

与OSD配合使用
----------------
DSI的数据输入可以配置为先经过OSD处理，OSD的功能介绍请参阅OSD模块。

.. only:: html

   .. include:: dsi_register.rst

.. raw:: latex

   \input{../../zh_CN/content/dsi}
