===========
AUDIO
===========

简介
=====
芯片内置一个AUDIO音频处理模块，支持pdm/模拟接口麦克风录音，立体声放音。

主要特征
===========
- 集成2路20bit ADC,可支持3路模拟mic差分输入

    + 采样率：8k~96k
    + 信噪比(A-W)：97dB @ 0dB增益
    + 谐波失真+噪声：-87dB @ 0dB增益
    + 模拟前置增益：0dB, 6~42 dB, 3dB一档

- 一个电压可设置的低噪声偏置电源给模拟MIC供电，调节范围1.8V~2.5V
- 可调节的高通滤波器和独立的数字音量控制，用于ADC通路
- 一个5段的参数均衡器,用于ADC通路
- 支持数字mic接口，复用输入GPIO
- 集成1路20bit DAC,可支持2路模拟LINEOUT差分输出，输出具有斜坡上电功能

    + 采样率：8k~192k
    + 信噪比(A-W)：103dB @ 0dB增益
    + 谐波失真+噪声：-90dB @ 0dB增益
    + 模拟输出增益：0dB, 6~42 dB, 3dB一档

- 独立的数字音量控制，并可以支持音量柔和调节/静音,用于DAC播放通路
- 支持动态范围控制，灵活调节的10段参数均衡器，用于DAC播放通路
- 支持语音活动检测功能，可用于低功耗的语音唤醒应用
- 32位宽度的发送、接受FIFO
- 支持DMA传输模式


功能描述
===========

AUDIO模块基本框图如图所示。


AUIDO模块包含了
两
路ADC模数转换器，经过PGA增益后，经过抽取滤波器，HPF滤波器之后，进入音量控制模块。用户可以通过音量控制模块，控制静音/非静音，控制音量大小，控制声音渐入/渐出效果。
五段EQ滤波器会优化音频性能，对音频各个频段进行增益和衰减，从而优化录音音色。
AGC会根据音频数据的幅值对音量进行调整，从而优化录音的性能，减少出现录音的顶部失真。
VAD模块是内部自带的唤醒模块，VAD模块会区分环境中的噪声信号与有用的音频信号，当侦测到有效的音频信号输入时，会产生一个VAD_INT事件。
录音的数据最终会存放在深度为32的FIFO中，可以由 RX_FIFO_CTRL[25:24]寄存器来控制FIFO的存放格式。RX_FIFO_CTRL[5]配置采样的分辨率。
录音的数据接口可以选择为PDM数字接口，或者模拟麦克风接口，可以由DAC_0[12] DAC_0[15] DAC_0[18] 位来控制接口的类型。

AUDIO模块包含了
一
路DAC数模转换器，数据从FIFO中取出，经过混声器，以及EQ滤波器，音量控制，插入滤波器，最终调制为模拟信号，驱动喇叭实现播放。
混声器可以将FIFO里面读出的音频数据与ADC通路录音数据进行混合。EQ滤波器对各个频段进行增益衰减，从而对播放音频的音色进行修改。
音量控制模块会对播放音频的音量以及键入渐出方式进行控制。

AUDIO中断
-------------
AUDIO有着丰富的中断控制，包括以下几种中断模式：

 - TX FIFO请求中断
 - TX FIFO underrun中断
 - TX FIFO overrun中断
 - RX FIFO请求中断
 - RX FIFO undderrun中断
 - RX FIFO overrun中断
 - 录音音量调节中断
 - 播放音量调节中断
 - VAD 中断



当TX_FIFO_CTRL中TX_DRQ_CNT大于TX_TRG_LEVEL时,产生TX FIFO请求中断。当条件不满足时该中断标志会自动清除。

当TX FIFO中并没有数据，但是用户却通过TX_FIFO_CTRL中的TX_CH_EN使能了TX FIFO调制，则会进入TX FIFO underrun中断。

当用户填入超过TX FIFO最大深度的数据的时候，会导致TX FIFO溢出，从而产生TX FIFO overrun中断

当RX_FIFO_CTRL中RX_DRQ_CNT大于RX_TRG_LEVEL时,产生RX FIFO请求中断。当条件不满足时该中断标志会自动清除。

当RX FIFO中并没有数据，但是用户却通过RX_FIFO_CTRL中的RX_CH_EN使能了RX FIFO调制，则会进入RX FIFO underrun中断。

当用户填入超过RX FIFO最大深度的数据的时候，会导致RX FIFO溢出，从而产生RX FIFO overrun中断

当ADC的录音音量调节完成的时候，会触发ADC音量调节完成中断, 对于一般的应用场景而言，ADC的音量调节是立即完成的。

当DAC的播放音量调节完成的时候，会触发DAC音量调节完成中断，因为DAC播放会有渐变的效果，所以音量调节不一定是立即完成的，会根据DAC_H_CTRL_MODE相关寄存器来确定调节时间。

FIFO格式控制
--------------
TX_FIFO_CTRL与RX_FIFO_CTRL(RX_FIFO_CTRL与TX_FIFO_CTRL完全一致，故以下简称为FIFO_CTRL)可以控制音频数据储存在FIFO的格式。

用户通过配置 FIFO_CTRL[5]来选择音频的分辨率。

当分辨率选择位16bits时，FIFO控制器支持如下四种数据存储格式，由FIFO_CTRL[25:24]来决定。


 - Mode 0:

   * DATA[31:0] = {FIFO[19:14],16'h0}

 - Mode 1:

   * DATA[31:0] = {8{FIFO[19]},FIFO[19:4],8'h0}

 - Mode 2:

   * DATA[31:0] = {12{FIFO[19]},FIFO[19:4],4'h0}

 - Mode 3:

   * DATA[31:0] = {16{FIFO[19]},FIFO[19:4]}

在录音/播放的时候，32Bits数据的转换结果或待解调的数字音源在左边，记作DATA[31:0]。他将被储存在FIFO中的格式如右边，因为录音的分辨率实际为20bits，所以当选择分别率为16bits的时候，需要对20bit的分辨率做一些剪裁，
因此选取了20bit分辨率的高16bits作为最终的结果FIFO[19:14]，并把它保存在了高16bits的位置，低16bits采用用0补齐的操作。
Mode1、2、3与Mode0的表示方式相同，值得说明的是，8{FIFO[19]}符号表示的是会用bit[19]的值来填充高八位。

因此，当选择分辨率为16bits的时候，AUDIO提供了四种模式来存放转换/输出的数字结果。

当分辨率为20bits的时候，四种模式的储存方式如下：

 - Mode 0:

   * DATA[31:0] = {FIFO[19:0],12'h0}

 - Mode 1:

   * DATA[31:0] = {8{FIFO[19]},FIFO[19:0],4'h0}

 - Mode 2:

   * DATA[31:0] = {12{FIFO[19]},FIFO[19:0]}

 - Mode 3:

   * DATA[31:0] = {16{FIFO[19]},FIFO[19:4]}

最高有效位的分布

 - Mode 0:

   * 有效数据的最高位在31 bits

 - Mode 1:

   * 有效数据的最高位在23 bits

 - Mode 2:

   * 有效数据的最高位在19 bits

 - Mode 3:

   * 有效数据的最高位在15 bits

FIFO的启动与DMA搬运
------------------------
AUDIO的FIFO数据可以通过DMA进行搬运。

用户可以通过RX_FIFO_STATUS/TX_FIFO_STATUS寄存器实时获得目前FIFO有效数据的数量。

通过配置 FIFO_CTRL[15:14]来选择发起DMA request的FIFO count阈值，是8/16/32，或者是由FIFO_CTRL[22:16]配置来决定。

当count的值大于设定阈值，并且TX_FIFO_CTRL[9:8]或RX_FIFO_CTRL[12:8]对应通路的FIFO被使能，则会发起一次DMA搬运。

注意，启动 TX FIFO时，如果TX FIFO里面并没有有效的数据，则会触发tx underrun错误。因此要注意软件配置顺序。

