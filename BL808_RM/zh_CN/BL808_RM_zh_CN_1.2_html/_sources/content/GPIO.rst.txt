===========
GPIO
===========

简介
=====
GPIO(General Purpose I/O Ports)是通用输入/输出端口，用户可将其与外部硬件设备连接达到控制外部硬件设备的目的。


主要特征
=========
 - 最多可达 40 个I/O引脚
 - 每个I/O引脚可配置的功能最多可达 25 种
 - 每个I/O引脚都可以配置为上拉、下拉或浮空模式
 - 每个I/O引脚都可以配置为输入、输出或高阻态模式
 - 每个I/O引脚的输出模式都有 4 种驱动能力可选择
 - 每个I/O引脚的输入模式都可以设置是否开启施密特触发器
 - 每个I/O引脚都支持 9 种外部中断模式
 - FIFO 深度为 128 半字
 - 可用DMA将数据从RAM搬至I/O引脚用于输出

GPIO 输入设置
=======================
通过设置 GPIO_CFGxx 寄存器，将通用的接口配置为输入模式，过程如下（其中xx表示GPIO引脚号）：

- 将<reg_gpio_xx_ie>设置为1，使能 GPIO 输入模式
- 将<reg_gpio_xx_func_sel>设置为 11 即进入 SW-GPIO 模式
- 在 SW-GPIO 模式下，可通过<reg_gpio_xx_smt>设置是否使能施密特触发器，用于波形的整形
- 通过<reg_gpio_xx_pu>和<reg_gpio_xx_pd>设置是否使能内部上拉和下拉功能
- 如果需要中断则通过<reg_gpio_xx_int_mode_set>设定外部中断的类型，此时即可通过<reg_gpio_xx_i>读取I/O引脚的电平值

GPIO 输出设置
======================
通过 GPIO_CFGxx 寄存器设置 GPIO 不同的输出模式，共支持以下四种模式。

普通输出模式
-------------
- 将<reg_gpio_xx_oe>设置为1，使能 GPIO 输出模式
- 将<reg_gpio_xx_func_sel>设置为 11 ，进入 SW-GPIO 模式
- 将<reg_gpio_xx_mode>设置为 0，使能 I/O 的普通输出功能
- 可通过<reg_gpio_xx_pu>和<reg_gpio_xx_pd>设置是否使能内部上拉和下拉功能，此时即可通过<reg_gpio_xx_o>设置I/O引脚的电平值。

Set/Clear输出模式
------------------
- 将<reg_gpio_xx_oe>设置为1，使能 GPIO 输出模式
- 将<reg_gpio_xx_func_sel>设置为 11，进入SW-GPIO模式
- 将<reg_gpio_xx_mode>设置为1，使能I/O的Set/Clear输出功能
- 可通过<reg_gpio_xx_pu>和<reg_gpio_xx_pd>设置是否使能内部上拉和下拉功能

在Set/Clear输出模式下，可将<reg_gpio_xx_set>置1，使对应 I/O 引脚设为高电平，将<reg_gpio_xx_clr>置1可将对应 I/O 引脚设为低电平，
如果同时将<reg_gpio_xx_set>和<reg_gpio_xx_clr>置1则对应 I/O 引脚为高电平，对<reg_gpio_xx_set>和<reg_gpio_xx_clr>写 0 没有作用。

可编程输出模式
-------------
- 将<reg_gpio_xx_oe>设置为1，使能 GPIO 输出模式
- 将<reg_gpio_xx_func_sel>设置为 11，进入SW-GPIO模式
- 将<reg_gpio_xx_mode>设置为2，使能I/O的可编程输出功能
- 可通过<reg_gpio_xx_pu>和<reg_gpio_xx_pd>设置是否使能内部上拉和下拉功能。
  
在可编程输出模式下，当 GPIO_CFG142 寄存器的位<cr_gpio_tx_en>置1时，GPIO_CFG144寄存器存储的数据，依照顺序逐个写入对应的 I/O 引脚，从而设置引脚的电平，缓冲区大小为128 * 16bits。需要注意的是GPIO_CFG144寄存器储存的数据不是实际的引脚电平值，而是一种可编程的逻辑0/1，逻辑0/1与实际电平之间的关系描述如下。

在此模式下输出到引脚的电平状态可以自由设置。以 XCLK 为时钟源，GPIO_CFG142寄存器中<cr_code_total_time>设置的数值为一个周期：

逻辑1的电平状态：由<cr_code1_high_time>设置的一段高电平加上<cr_code_total_time>-<cr_code1_high_time>设置的一段低电平，
当<cr_invert_code1_high>为0时，表示逻辑1先输出高电平再输出低电平，否则先输出低电平再输出高电平；

逻辑0的电平状态：由<cr_code0_high_time>设置一段高电平加上<cr_code_total_time>-<cr_code0_high_time>设置一段低电平，
当<cr_invert_code0_high>为0时，表示逻辑0先输出高电平再输出低电平，否则先输出低电平再输出高电平。

.. note::
   由于缓冲区的寄存器是16位宽，所以每16个引脚为一组，在一组中从低到高序号的引脚分别由缓冲区中对应的bit控制。
   此外，GPIO_CFG143寄存器中的位<cr_gpio_dma_out_sel_latch>应该设置为0。<cr_gpio_dma_park_value>用于设置I/O默认电平，为1时默认电平是高电平，为0时默认电平是低电平。

当<cr_code_total_time> = 10，<cr_code0_high_time> =1，<cr_code1_high_time> = 5，<cr_invert_code0_high> = 0，<cr_invert_code1_high> = 0，
<cr_gpio_dma_park_value> = 0，<cr_gpio_dma_out_sel_latch> = 0 时，对应的波形图如下所示：

.. figure:: ../../picture/GPIOExample1Tx.svg
   :align: center

   普通GPIO输出波形

当<cr_code_total_time> = 10，<cr_code0_high_time> =1，<cr_code1_high_time> = 5，<cr_invert_code0_high> = 0，<cr_invert_code1_high> = 1，
<cr_gpio_dma_park_value> = 1，<cr_gpio_dma_out_sel_latch> = 0 时，对应的波形图如下所示：

.. figure:: ../../picture/GPIOExample2Tx.svg
   :align: center

   默认电平为高电平，逻辑1电平翻转输出波形

当<cr_code_total_time> = 10，<cr_code0_high_time> =1，<cr_code1_high_time> = 5，<cr_invert_code0_high> = 1，<cr_invert_code1_high> = 0，
<cr_gpio_dma_park_value> = 0，<cr_gpio_dma_out_sel_latch> = 0 时，对应的波形图如下所示：

.. figure:: ../../picture/GPIOExample3Tx.svg
   :align: center

   默认电平为低电平，逻辑0电平翻转输出波形

当<cr_code_total_time> = 10，<cr_code0_high_time> =1，<cr_code1_high_time> = 5，<cr_invert_code0_high> = 1，<cr_invert_code1_high> = 1，
<cr_gpio_dma_park_value> = 1，<cr_gpio_dma_out_sel_latch> = 0 时，对应的波形图如下所示：

.. figure:: ../../picture/GPIOExample4Tx.svg
   :align: center

   默认电平为高电平，逻辑0电平翻转，逻辑1电平翻转输出波形

可编程Set/Clear输出模式
----------------------
- 将<reg_gpio_xx_oe>设置为1，使能 GPIO 输出模式
- 将<reg_gpio_xx_func_sel>设置为11，进入 SW-GPIO 模式
- 并且将<reg_gpio_xx_mode>设置为3，使能I/O的缓冲Set/Clear输出功能
- 可通过<reg_gpio_xx_pu>和<reg_gpio_xx_pd>设置是否使能内部上拉和下拉功能
  
此时当GPIO_CFG142寄存器的位<cr_gpio_tx_en>为1时，由GPIO_CFG144寄存器写入 FIFO 的数据将被按顺序逐个设置对应引脚的电平，缓冲区大小为128 * 16bits。

在此模式下输出到引脚的电平状态可以自由设置。以 XCLK 为时钟源，GPIO_CFG142寄存器中位<cr_code_total_time>设置的数值为一个周期：

每 8 个引脚为一组，GPIO_CFG144 寄存器低 8 位和高 8 位分别设置这 8 个引脚输出高/低电平。
若低 8 位写 1，则对应的引脚输出高电平；若高 8 位写 1，则对应的引脚输出低电平，此时该寄存器中写0的位不生效，
当高 8 位和低 8 位中对应位同时将同一个引脚写1时，该引脚电平为高电平。

此外，GPIO_CFG143寄存器中的位<cr_gpio_dma_out_sel_latch>应该设置为1。
<cr_gpio_dma_park_value>用于设置I/O默认电平，为1时默认电平是高电平，为0时默认电平是低电平。

I/O FIFO
=================
I/O FIFO 的深度为 128 半字，GPIO_CFG143寄存器中的位<gpio_tx_fifo_cnt>表示FIFO当前可用空间的大小，默认值是 128，
每次向 GPIO_CFG144 寄存器写入一个数值后，<gpio_tx_fifo_cnt>的值都会递减 1，
如果减至 0 后继续向 GPIO_CFG144 寄存器写入数值，且<cr_gpio_tx_fer_en>为 1 即错误中断被使能，则会产生该中断。

当 GPIO_CFG142 寄存器的位<cr_gpio_tx_en>为1时，I/O FIFO 的数据被逐个发送到I/O引脚，此时<gpio_tx_fifo_cnt>的值会递增，
当递增到大于<cr_gpio_tx_fifo_th>时，且<cr_gpio_tx_fifo_en>为1即FIFO中断被使能，则会产生该中断。

如果 CR_GPIO_CFG143 寄存器的位<cr_gpio_dma_tx_en>为1，则使能 DMA 发送数据，
此时如果<cr_gpio_tx_fifo_th>小于<gpio_tx_fifo_cnt>，则DMA会将数据从设定好的RAM中搬运至缓冲区，
此时中断标志<r_gpio_tx_fifo_int>自动被清除。


I/O中断
================
I/O支持多种外部中断，将 GPIO_CFGxx 寄存器的<reg_gpio_xx_int_mask>设置为0，即可使能对应引脚的外部中断功能，<reg_gpio_xx_int_mode_set>用于设置对应引脚的外部中断类型。
支持的中断类型如下：

- 同步下降沿中断

  * 以 f32k_clk 时钟为基准，在每个时钟上升沿采样一次输入引脚电平，若出现一个高电平后紧跟两个低电平，则此时产生同步下降沿中断
- 同步上升沿中断

  * 以 f32k_clk 时钟为基准，在每个时钟上升沿采样一次输入引脚电平，若出现一个低电平后紧跟两个高电平，则此时产生同步上升沿中断
- 同步低电平中断

  * 以 f32k_clk 时钟为基准，检测到低电平后，在第三个时钟上升沿处产生同步低电平中断
- 同步高电平中断

  * 以 f32k_clk 时钟为基准，检测到高电平后，在第三个时钟上升沿处产生同步高电平中断
- 同步双边沿中断

  * 以 f32k_clk 时钟为基准，若检测到高电平转换至低电平（低电平转换至高电平），会产生下降沿（上升沿）事件，事件产生后在第三个时钟上升沿处产生同步双边沿中断
- 异步下降沿中断

  * 当检测到高电平转换至低电平时，立即触发异步下降沿中断
- 异步上升沿中断

  * 当检测到低电平转换至高电平时，立即触发异步上升沿中断
- 异步低电平中断
  
  * 以 f32k_clk 时钟为基准，在每个时钟上升沿采样一次输入引脚电平，若出现连续3次都为低电平，则触发异步低电平中断
- 异步高电平中断
  
  * 以 f32k_clk 时钟为基准，在每个时钟上升沿采样一次输入引脚电平，若出现连续3次都为高电平，则触发异步高电平中断

在中断函数中可以通过 GPIO_CFGxx 寄存器<gpio_xx_int_stat>获取到产生中断的 GPIO 状态，同时可以通过 <reg_gpio_xx_int_clr> 清除对应的中断标志。

.. only:: html

   .. include:: glb_register.rst

.. raw:: latex

   \input{../../zh_CN/content/glb}