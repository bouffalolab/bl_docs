==========
TIMER
==========

Overview
=====
Two 32-bit counters are built in the chip, and each can independently control and configure its parameters and clock frequency.

There is one watchdog counter in the chip. Unpredictable software or hardware behavior may cause the application to malfunction, and the watchdog timer can help recover the system. If the current stage exceeds the preset time, but the watchdog is not reset or turned off, the interrupt or system reset can be triggered as configured.

.. figure:: ../../picture/TimerBlock.svg
   :align: center

   Block diagram of timer

.. figure:: ../../picture/WatchdogBlock.svg
   :align: center

   Block diagram of watchdog timer

Features
=========
- 32-bit timer

   * Multiple clock sources, up to 80M clock supported
   * Bit clock divider with a division factor of 1-256
   * Two 32-bit timers
   * Each timer has three alarm value settings, and the alarm when each set of alarm values overflows can be independently set.
   * Supports Free Run mode and Pre_load mode
   * Supports measuring the pulse width of external GPIO

- Watchdog timer

- With 16-bit watchdog timer
- Supports write password protection to prevent system error caused by wrong settings
- Supports two watchdog overflow modes: interrupt or reset

Functional Description
==========================

There are 5 watchdog timer clock sources, which can be selected via cs_wdt in the TCCR register:

- FCLK--bus clock
- 32K--32K clock
- 1K--1K clock
- XTAL--external crystal oscillator
- GPIO--external GPIO

There are 5 types of timer clock sources, which can be selected via cs_2 and cs_3 in register TCCR:

- FCLK--bus clock
- 32K--32K clock
- 1K--1K clock(32K frequency division)
- XTAL--external crystal oscillator
- GPIO--external GPIO

Each counter has its own 8-bit frequency divider, which can divide the clock by 1-256.
Specifically, when it is set to 0, it means no frequency division. When it is set to 1, it will divide the clock by 2, and so on.
The maximum division factor is 256, and the counter will take the divided clock as the counting cycle unit.

Working Principle of General Purpose Timer
--------------------
Each general purpose timer contains three comparators, one counter, and one PreLoad register. When the clock source is set and the timer is started, the counter starts to count up cumulatively. When the value of counter is equal to that of the comparator, the comparison flag is set and a comparison interrupt can be generated.

You can configure the value of channel 0 comparator 0 by setting tclr2_0, that of channel 0 comparator 1 by setting tclr2_1, and that of channel 0 comparator 2 by setting tclr2_2 in the register TICR2. The tplvr2 in the register TPLVR2 sets the channel 0 preload value.

You can configure the value of channel 1 comparator 0 by setting tclr3_0, that of channel 1 comparator 1 by setting tclr3_1, and that of channel 1 comparator 2 by setting tclr3_2 in the register TICR3. The tplvr3 in the register TPLVR3 sets the channel 1 preload value.

The timer supports two counting modes, PreLoad mode and FreeRun mode, which are selected by register TCMR.
The timer2_mode in register TCMR sets the counting mode of timer0, and the timer3_mode in register TCMR sets the counting mode of timer1.

PreLoad mode
^^^^^^^^^^^^^
The initial value of the counter in PreLoad mode is the value of the TPLVR register (Preload Register), from which the count is accumulated upwards.
Register TPLVR2 sets the preload value of timer0, and register TPLVR3 configures the preload value of timer1.
The tplcr2 in register TPLCR2 configures the PreLoad trigger condition of timer0, and the tplcr3 in register TPLCR3 configures the PreLoad trigger condition of timer1.
When the PreLoad trigger condition is met, the counter value will be reset to the value of PreLoad register, and then the counter will start to count up again.

During the counter counting of the timer, once the counter value matches with one of the three comparators, the comparison flag of that comparator will be set and the corresponding comparison interrupt can be generated.

If the value of the PreLoad register is 10, and the values of comparators 0, 1, and 2 are 13, 16, and 19 respectively, the working sequence of the timer in the PreLoad mode is as follows:

.. figure:: ../../picture/TimerPreload.svg
   :align: center

   Working sequence of timer in preLoad mode

FreeRun mode
^^^^^^^^^^^
FreeRun mode is the counter accumulation mode. In FreeRun mode, the initial value of the counter is 0. After starting the timer, the counter starts to accumulate from 0, and when the maximum value of the counter is reached, it starts to count from 0 again.

During the counter counting of the timer, once the counter value agrees with one of the three comparators. The comparison flag of that comparator will be set and the corresponding comparison interrupt can be generated.

In FreeRun mode, the timer works in the same timing as PreLoad, except that the counter will accumulate from 0 to the maximum value, and the mechanism of comparison flags and comparison interrupts generated during the period is the same as PreLoad mode.

Measuring External GPIO Pulse Width
^^^^^^^^^^^^^^^^^^^^
The timer supports calculating the pulse width of external GPIOs using the internal clock source.

To configure, proceed as follows.

1. Configure the external GPIO to function as gpio_tmr_clk. This is achieved by configuring register dig_clk_cfg2 in the GLB module.

   Register dig_clk_cfg2[13:12] bits for gpio_tmr_clk_sel: Selects the GPIO clock mode.
   A bit in register dig_clk_cfg2[11:8] is configured to 0 to indicate clock input mode.
   These two registers need to be used together and are configured as follows, and so on according to the GPIOs used.

.. table:: gpio_tmr_clk function configuration
    :widths: 20,40,40
    :width: 100%
    :align: center

    +-------------+----------------------------------+----------------------------------------+
    |    GPIO     | dig_clk_cfg2[13:12]              | dig_clk_cfg2[11:8]                     |
    +=============+==================================+========================================+
    |    GPIO0    | gpio_tmr_clk = 0                 | chip_clk_out_0_en = 0                  |
    +-------------+----------------------------------+----------------------------------------+
    |    GPIO1    | gpio_tmr_clk = 1                 | chip_clk_out_1_en = 0                  |
    +-------------+----------------------------------+----------------------------------------+
    |    GPIO2    | gpio_tmr_clk = 2                 | chip_clk_out_2_en = 0                  |
    +-------------+----------------------------------+----------------------------------------+
    |    GPIO3    | gpio_tmr_clk = 3                 | chip_clk_out_3_en = 0                  |
    +-------------+----------------------------------+----------------------------------------+
    |    GPIO4    | gpio_tmr_clk = 0                 | chip_clk_out_0_en = 0                  |
    +-------------+----------------------------------+----------------------------------------+

2. The timer2_gpio_inv / timer3_gpio_inv bits in the GPIO register configure whether the external pulse width needs to be measured high or low.   If this bit is 0, it means high level; if this bit is 1, it means low level. 3.

3. configure timer2_gpio_en in GPIO register to enable GPIO measurement function

4. Configure the timer clock source and operation mode, and enable timer

5. When gpio_lat_ok in GPIO register is set to 1, get the value of GPIO_LAT2 and GPIO_LAT1 register and calculate the width.

The calculation method of the pulse width of the external gpio: (GPIO_LAT2-GPIO_LAT1)\* the width of 1 cycle of the internal clock source of the timer.

For example: the internal clock source of the timer is 80M, the frequency of the external gpio is 2M, and the duty ratio is 1:1. Write 1 to the timer2_gpio_inv bit to calculate the width of the low level of the external gpio.

- Write 1 to the timer2_gpio_inv bit, which means to calculate the width of the low level of the external gpio. After the above configuration is completed, the difference between the register GPIO_LAT2 and the register GPIO_LAT1 is 20, then the low level width of the external gpio is: 20 \*(1 / 80000000) = 1 / 4000000
- Write 0 to the timer2_gpio_inv bit, which means to calculate the width of the high level of the external gpio.After the above configuration is completed, the difference between the register GPIO_LAT2 and the register GPIO_LAT1 is 20, then the high level width of the external gpio is: 20 \*(1 / 80000000) = 1 / 4000000;

Working Principle of Watchdog Timer
----------------------
The watchdog timer integrates a counter and a comparator. The counter counts up from 0 cumulatively. If the counter is reset, it counts up again from 0. When the value of counter is equal to that of the comparator, it can generate a comparison interrupt signal or a system reset signal. Users may use one of them as required.
The watchdog counter will add 1 to each counting cycle unit, and the software can reset this counter to zero through APB at any time.

The wmr in the register WMR sets the comparison value.

If the comparator value is 6, the working sequence of Watchdog is shown as follows:

.. figure:: ../../picture/WatchDog.svg
   :align: center

   Working sequence of watchdog

Alarm Setting
-----------
Each set of counter has three comparison values to provide software settings, and it can set whether each comparison value triggers an alarm interrupt. When the counter's value matches the comparison value and an alarm will be given, the counter will notify the processor through interrupts.

Through APB, the software can read whether there is an alarm at present and which comparison value triggers the alarm interrupt. When the alarm interrupt is cleared, the alarm state will also be cleared synchronously.

Watchdog Alarm
-----------
Each counter can be configured with one comparison value. When the watchdog counter is too late to be reset to zero due to a system error, which causes the watchdog counter to exceed the comparison value, it will trigger the watchdog alarm. There are two alarm modes. One is to notify the software to process it by generating an interrupt. The other one is to perform watchdog reset. When the watchdog reset is triggered, it will notify the system's reset controller and prepare for system reset. When everything is ready, the watchdog reset will be performed. It is worth noting that the software can read WSR register through APB to know whether watchdog reset has occurred.

.. figure:: ../../picture/WatchDogAlarm.svg
   :align: center

   Watchdog alarm mechanism

.. only:: html

   .. include:: ltmr_register.rst

.. raw:: latex

   \input{../../en/content/ltmr}