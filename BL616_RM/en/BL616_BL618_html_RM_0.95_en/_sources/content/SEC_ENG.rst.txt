===========
SEC ENG
===========

Overview
=====
SEC ENG has a variety of built-in computing modules, including AES, SHA, CRC, GMAC, PKA, and TRNG.

Features
=========
- AES

    * Supports 128-bit, 192-bit and 256-bit key lengths
    * Support encryption and decryption of multiple link modes (ECB/CBC/CTR/XTS)
    * Exclusive AES LINK function

- SHA

    * Support SHA1/SHA224/SHA256/SHA384/SHA512
    * Exclusive SHA LINK function

- Support MD5, CRC-16, CRC-32

Functional Description
===========

AES Accelerator
-------------
key
^^^^^^^^^^^

The key length required for encryption mode and decryption mode can be selected by configuring se_aes_0_mode and se_aes_0_dec_en in the register se_aes_0_ctrl.

.. figure:: ../../picture/SecEngAesMode.svg
   :align: center

   AES operation mode diagram

Select whether to enable the hardware key through aes_0_hw_key_en in the register se_aes_0_ctrl. If you use a software key, you also need to configure the registers se_aes_0_key_0~se_aes_0_key_7 to store the key, and each register stores a 4-byte key.

link mode
^^^^^^^^^^^

Different link modes can be selected through se_aes_0_block_mode in the register se_aes_0_ctrl. Currently, ECB, CBC, CTR, and XTS modes are supported.

Plaintext, ciphertext
^^^^^^^^^^^^^^^^^^^

- Plaintext or ciphertext needs to be a multiple of 16
- The register se_aes_0_msa stores the plaintext address entered during encryption or the ciphertext address entered during decryption
- The register se_aes_0_mda stores the ciphertext address output during encryption or the plaintext address output during decryption
- se_aes_0_msg_len in the register se_aes_0_ctrl is used to set the length of ciphertext or plaintext (in units of 16 bytes)

initialization vector
^^^^^^^^^^^^^^^^^^^

The registers se_aes_0_iv_0~se_aes_0_iv_3 store the initialization vector IV. You can choose whether to use a new iv by configuring aes_0_iv_sel in se_aes_0_ctrl. You need to clear 0 when configuring iv for the first time, and you need to set 1 if you continue to use this iv or automatically update iv.

Encryption and decryption configuration process
^^^^^^^^^^^^^^^^^^

- Enable AES with se_aes_0_en in the configuration register se_aes_0_ctrl
- Configuration register se_aes_0_endian, including se_aes_0_dout_endian, se_aes_0_din_endian, se_aes_0_key_endian, se_aes_0_iv_endian, se_aes_0_twk_endian, if the value is 0, it means little-endian, if the value is 1, it means big-endian
- se_aes_0_block_mode in the configuration register se_aes_0_ctrl selects the link mode
- se_aes_0_mode in the configuration register se_aes_0_ctrl to select the key length
- To use software key, configure registers se_aes_0_key_0~se_aes_0_key_7 to store the key. To use a hardware key, set aes_0_hw_key_en in register se_aes_0_ctrl
- Configure registers se_aes_0_iv_0~se_aes_0_iv_3 to set IV, the filling order for MSB is se_aes_0_iv_0~se_aes_0_iv_3, and the filling order for LSB is se_aes_0_iv_3~se_aes_0_iv_0
- se_aes_0_dec_en in the configuration register se_aes_0_ctrl selects the encryption or decryption mode
- The configuration register se_aes_0_msa sets the source address of the data to be processed
- The configuration register se_aes_0_mda sets the destination address where the processing result is stored
- se_aes_0_msg_len in the configuration register se_aes_0_ctrl sets the length of the data to be processed, in units of 16 bytes
- se_aes_0_trig_1t in the configuration register se_aes_0_ctrl triggers AES to run

The result is output to the destination address specified by se_aes_0_mda.


SHA Accelerator
-------------
SHA mode
^^^^^^^^^^^

The se_sha_0\_mode in the register se_sha_0\_ctrl:   0:SHA-256 1:SHA-224 2:SHA-1 3:SHA-1 4:SHA-512 5:SHA-384 6:SHA-512/224 7:SHA-512/256

The se_sha_0\_mode_ext in the register se_sha_0\_ctrl: hash mode extention; 0:SHA 1:MD5 2:CRC-16 3:CRC-32

Plaintext and ciphertext
^^^^^^^^^^^^^^^^^^

- The register se_sha_0\_msa stores the plaintext address.

- The register se_sha_0\_hash_l\_0\~se_sha_0\_hash_l\_7 stores the ciphertext.

Operation flow
^^^^^^^^^^^^^^^^^^

- Configure se\_sha\_0\_mode in the register se\_sha\_0\_ctrl to set the specific mode of SHA

- Enable SHA by configuring se\_sha\_0\_en in the register se\_sha\_0\_ctrl

- Configure se\_sha\_0\_hash\_sel in the register se\_sha\_0\_ctrl; 0 means starting a new HASH calculation, and 1 means using the last result for HASH calculation

- Configure the register se\_sha\_0\_msa to set the source address of the data to be processed

- Configure se\_sha\_0\_msg\_len in the register se\_sha\_0\_ctrl to set the length of the data to be processed (512 bits for SHA1, SHA224 and SHA256, while 1024 bits for SHA512, SHA384, SHA512/224, and SHA512/256)

- Configure se\_sha\_0\_trig\_1t in the register se\_sha\_0\_ctrl to trigger SHA

- The output result is stored in se\_sha\_0\_hash\_l\_0~se\_sha\_0\_hash\_l\_7, MSB:se\_sha\_0\_hash\_l\_0~se\_sha\_0\_hash\_l\_7, LSB:se\_sha\_0\_hash\_l\_7~se\_sha\_0\_hash\_l\_0

Random Number Generator (RNG)
-------------
The random numbers generated by the built-in true RNG can be used as the basis for encryption and other operations.

- True random numbers: They are generated through physical phenomena, such as coin tossup, dicing, wheel rotation, noise from using electronic components, and nuclear fission. Such RNGs are called physical RNGs, and their weaknesses are high technical requirements.

- Pseudo-random numbers: Truly random numbers (or random events) are randomly generated in a generation process according to the distribution probability shown in the experimental process, and the result is unpredictable and invisible. The random function in the computer is simulated according to a specified algorithm, and its result is deterministic and visible. We may consider that the probability of this foreseeable result is 100%. Hence the "random number" generated by computer random function is not truly random, but pseudo-random.

Usage process
^^^^^^^^^^^^^^^^^^

- Enable TRNG by configuring se\_trng\_0\_en in the register se\_trng\_0\_ctrl\_0

- Configure se\_trng\_0\_trig\_1t in the register se\_trng\_0\_ctrl\_0 to trigger TRNG

- The output result is stored in se\_trng\_0\_dout\_0~se\_trng\_0\_dout\_7

