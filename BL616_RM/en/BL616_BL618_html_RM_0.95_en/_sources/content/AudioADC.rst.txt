===========
AudioADC
===========

Overview
=====
The chip has a built-in AudioADC module for single-channel recording and an integrated 16bit high-precision ADC for analog audio signal acquisition, in addition to supporting the PDM digital interface.

Features
===========
- One 16-bit ADC is integrated to support 1 analog mic differential/single-ended input and multiplexed GPIO input

  * Sampling rate: 8k–96k
  * Signal to noise ratio (AW): 90 dB @ 6 dB gain
  * Harmonic distortion + noise: -80dB @ 6dB gain
  * Analog pre-amplifier gain: 6–42 dB, 3 dB per gear
  * Configurable analog parameters such as input impedance of ADC
  
- Additional support for PDM digital interface for digital mic recording, multiplexing GPIO inputs
- Additional support for DC measurement mode in addition to audio recording mode, using AudioADC as a high precision ADC, supporting differential and single-ended modes with resolutions up to 16bit
- Adjustable high-pass filter and independent digital volume control
- 32-bit width FIFO depth of 32, data support 32bit/24bit/20bit/16bit four storage formats
- Supports DMA transfer mode

Clock Tree
====================

Users need to first configure the Audio PLL output clock to 491.52M or 451.58M, corresponding to the 48K series and 44.1K series sample rate, respectively, and select the Audio PLL output of 5 divisions as the AudioDAC clock source. The AudioADC module will automatically configure the crossover coefficient of each sub-module according to the operating mode and sample rate setting, so there is no need to set the crossover coefficient manually. This register value and crossover frequency example are shown below.

.. figure:: ../../picture/clockTreeADC.svg
   :align: center

   Block Diagram of Clock

Functional Description
===========

The block diagram of AudioADC is shown as follows.

.. figure:: ../../picture/AudioADC_Arc.svg
   :align: center

   Block Diagram of Module

The AUADC module input supports both audio analog signals and PDM digital signals.
When selected as a PDM digital signal, the input data enters the audio processing channel after being processed by the PDM circuit.

When selected as a digital signal, the analog signal will first be amplified by the PGA and then result in the ADC quantization process before entering the audio processing channel.

The volume processing channel will use SINC function low-pass filtering and resampling for the initial data, then high-pass filtering and volume gain control processing, and finally push the data into the FIFO.

Audio channel selection
----------------------------
The AudioADC module supports analog mic input and PDM digital mic interface, where the PDM timing specification has data on the rising and falling edges of the clock for the left and right channels, respectively.

When using the analog mic input, you need to configure the built-in ADC and select the integrated ADC to be After the configuration of the integrated ADC is completed, select the audio source as ADC by the adc_0_src bit of the pdm_dac_0 register.

When using the PDM digital mic, you need to start the PDM via pdm_0_en in pdm_dac_0 and then select the left channel or right channel via adc_0_pdm_sel in pdm_pdm_0.

AUADC Interrupt
-------------
AUADC supports the following interrupt control modes:

- RX FIFO request interrupt

- RX FIFO underrun interrupt

- RX FIFO overrun interrupt

A RX FIFO request interrupt is generated when RX\_DRQ\_CNT in RX\_FIFO\_CTRL is greater than RX\_TRG\_LEVEL. When the condition is not met, the interrupt flag is cleared automatically.

When there is no data in RX FIFO, but the user enables RX FIFO modulation through RX\_CH\_EN in RX\_FIFO\_CTRL, the RX FIFO underrun interrupt is generated.

When the user fills in data that exceeds the maximum depth of RX FIFO, it leads to RX FIFO overflow and cause a RX FIFO overrun interrupt.

FIFO Format Control
--------------
The rx_data_mode in the audadc_rx_fifo_ctrl register controls the format of the audio data stored in the FIFO.

The FIFO controller supports the following four data storage formats:

 - Mode 0:

    DATA[31:0] = {FIFO[15:0],16'h0}

 - Mode 1:

    DATA[31:0] = {8{FIFO[15]},FIFO[15:0],8'h0}

 - Mode 2:

    DATA[31:0] = {12{FIFO[15]},FIFO[15:0],4'h0}

 - Mode 3:

    DATA[31:0] = {16{FIFO[15]},FIFO[15:0]}

Distribution of MSB

- Mode 0:
  
  The MSB of data is 31 bits

- Mode 1:
  
  The MSB of data is 23 bits

- Mode 2:
  
  The MSB of data is 19 bits

- Mode 3:
  
  The MSB of data is 15 bits

If there is no special requirement for the storage format, generally, Mode3 is appropriate. As the maximum resolution of ADC is 16-bit, using 16-bit RAM to store audio can achieve the greatest efficiency. For other formats, the valid 16-bit data is placed in different positions in the 32-bit width, with low bits filled with 0 and high bits filled with sign bits.

Measurement Mode
------------------------
The high performance ADC in AudioADC supports the use as high precision ADC in addition to audio analog signal sampling, and comes with adjustable gain PGA amplifier for single-ended and differential weak signal acquisition.

The measurement mode needs to be selected in the adc_rate segment of the audpdm_top register. The measurement mode is enabled by audadc_meas_filter_en position 1 in the audadc_cmd register.

In the audadc_pga_mode segment and audadc_pga_gain segment, select the analog channel for measurement, and in the audadc_pga_mode segment, configure the ADC mode as DC differential or DC single-ended mode, and the audio processing channel will be bypassed at this time.
Other configurations such as FIFO format in measurement mode are the same as in audio mode.

Startup of FIFO and DMA Transfer
------------------------
The data in FIFO of the PDM module can be transferred by DMA.

The user can obtain the current amount of valid data in FIFO in real time through the register PDM\_RX\_FIFO\_STATUS.

The FIFO threshold for triggering a DMA request is selected by configuring rx_drq_cnt in audadc_rx_fifo_ctrl with 4 options, 8, 16, 32, or the same as the FIFO interrupt threshold configured in rx_trg_level.

When the value of FIFO count is greater than the set threshold and AUDADC_RX_FIFO_CTRL[4] DMA mode is enabled, a request is initiated to DMA.

Note that if the data in the FIFO is not read out in time after starting AudioADC, an overrun error will be triggered when the FIFO overflows, and data will be lost at the same time.

Configuration Process
================================
1. For the sampling rate of the recorded audio, select the corresponding sampling rate through audpdm\_top\[31:28].

2. Configure the adc\_0\_src register of pdm\_dac\_0 depending on whether the recorded data source is PDM digital signal or analog signal.

3. In case of pdm format, select the channel of pdm through the adc\_0\_pdm\_sel in pdm\_pdm\_0

4. Configure the DMA to transfer the RX FIFO data of Audio to the designated area in real time

5. Turn on the state machine through the rx\_ch\_en in audadc\_rx\_fifo\_ctrl to start recording

6. Adjust the volume during recording (optional)

.. only:: html

   .. include:: ausolo_register.rst

.. raw:: latex

   \input{../../en/content/ausolo}