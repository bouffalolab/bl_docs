==========
DAC
==========

Overview
=====
The DAC module is a 12-bit voltage output digital-to-analog converter that works with a DMA controller. The DAC has two output channels, each with a converter, and each channel can be converted independently. Can be used for audio playback, transmitter voltage modulation and other applications.

Features
=========
- DAC modulation accuracy is 12-bits
- DAC input clock can be selected as 32MHz or xclk
- Each channel has DMA function and supports 10 data transfer formats
- DAC dual channels convert individually or simultaneously
- Support two-channel playback DMA transfer mode
- The output pin of DAC is fixed as ChannelA is GPIO3, ChannelB is GPIO2
- Supports internal and external input reference voltages

Functional Description
=============================
The block diagram of DAC is shown as follows.

.. figure:: ../../picture/gpdac.svg
   :align: center

   Block Diagram of DAC

The DAC module includes two DAC modulation circuits and power supply circuits related to modulating analog signals. The user can select the reference voltage of the DAC through Ref_Sel to be external/internal, and Rng_Sel to select the output voltage range. The modulation data of the DAC can be directly written to the DAC modulation register (gpdac_a_data, gpdac_b_data in the register dac_cfg3) by the CPU, or transferred to the gpdac_dma_wdata register by the DMA.

DAC channel enable
---------------
Taking enabling channel A as an example, the configuration process is as follows:

1. Set the gpdac_en bit in register gpdac_config to 1 to enable the DAC
2. Enable DAC A channel conversion by setting the gpdac_a_en bit in register dac_cfg1 to 1
3. Set the gpdac_ioa_en bit in register dac_cfg1 to 1 to enable the conversion result of channel A to the GPIO port

DAC data format
------------------
When using DMA to convert data, there are a total of 10 data transmission formats, which can be configured by setting the corresponding gpdac_dma_format bit value in the register gpdac_dma_config
The data transmission format stored in the gpdac_dma_wdata register (with a width of 32-bit), the corresponding relationship is as follows:

.. table:: Data transfer format
    :widths: 40, 60
    :width: 100%
    :align: center

    +--------------------------------+-------------------------------------------------------------------------------------------------------+
    | Value of gpdac_dma_format      | gpdac_dma_wdata(Corresponding to the data transmission format of A and B channels)                    |
    +================================+=======================================================================================================+
    | 0                              | [11:0]: {A0}, {A1}, {A2}···                                                                           |
    +--------------------------------+-------------------------------------------------------------------------------------------------------+
    | 1                              | [27:16][11:0]: {B0,A0}, {B1,A1}, {B2,A2}···                                                           |
    +--------------------------------+-------------------------------------------------------------------------------------------------------+
    | 2                              | [27:16][11:0]: {A1,A0}, {A3,A2}, {A5,A4}···                                                           |
    +--------------------------------+-------------------------------------------------------------------------------------------------------+
    | 4                              | [15:4]: {A0}, {A1}, {A2}···                                                                           |
    +--------------------------------+-------------------------------------------------------------------------------------------------------+
    | 5                              | [31:20][15:4]: {B0,A0}, {B1,A1}, {B2,A2}···                                                           |
    +--------------------------------+-------------------------------------------------------------------------------------------------------+
    | 6                              | [31:20][15:4]: {A1,A0}, {A3,A2}, {A5,A4}···                                                           |
    +--------------------------------+-------------------------------------------------------------------------------------------------------+
    | 8                              | [31:24][23:16][15:8][7:0]: {A3,A2,A1,A0}, {A7,A6,A5,A4}···                                            |
    +--------------------------------+-------------------------------------------------------------------------------------------------------+
    | 9                              | [31:24][23:16][15:8][7:0]: {B1,B0,A1,A0}, {B3,B2,A3,A2}···                                            |
    +--------------------------------+-------------------------------------------------------------------------------------------------------+
    | 10                             | [31:24][23:16][15:8][7:0]: {B1,A1,B0,A0}, {B3,A3,B2,A2}···                                            |
    +--------------------------------+-------------------------------------------------------------------------------------------------------+
    | 11                             | [15:8][7:0]: {B0,A0}, {B1,A1}, {B2,A2}···                                                             |
    +--------------------------------+-------------------------------------------------------------------------------------------------------+

DAC output voltage
--------------------
The user can choose to use the external reference voltage or the internal reference voltage by setting the corresponding gpdac_ref_sel bit value in the dac_cfg0 register.

If the internal reference voltage is selected, the configuration and output voltage are shown in the table below. If external reference voltage is selected, connect the external voltage to fixed GPIO28.

.. table:: Internal reference voltage output voltage
    :widths: 30, 30, 40
    :width: 100%
    :align: center

    +-------------+---------------+------------------+
    | gpdac_a_rng | gpdac_ref_sel | Output range (V) |
    +=============+===============+==================+
    | 00          | 0             | 0.2-1            |
    +-------------+---------------+------------------+
    | 01/10       | 0             | 0.225-1.425      |
    +-------------+---------------+------------------+
    | 11          | 0             | 0.2-1.8          |
    +-------------+---------------+------------------+

DAC conversion
--------------

CPU mode
*********
Use the CPU method to perform data conversion, taking the simultaneous conversion of channel A and channel B as an example, the configuration process is as follows:

1. Set the DAC clock: write the value of the corresponding dig_clk_src_sel bit in the register dig_clk_cfg0 to 1, that is, select xclk as the DAC clock source
2. Set the clock frequency division factor: the user sets the value of the dig_512k_div bit corresponding to the register dig_clk_cfg0 and the gpdac_mode bit corresponding to the register gpdac_config according to the requirements
3. Initialize the GPIO pins of the A and B channels
4. Initialize and enable DAC channel A and channel B
5. Write the data to be converted into the corresponding gpdac_a_data and gpdac_b_data bits in register dac_cfg3 to complete the data conversion

DMA method
*********
Each DAC channel has DMA capability. Taking channel A using DMA for data conversion as an example, the configuration process is as follows:

1. Set the DAC clock: write the value of the corresponding dig_clk_src_sel bit in the register dig_clk_cfg0 to 1, that is, select xclk as the DAC clock source
2. Set the clock frequency division factor: the user sets the value of the dig_512k_div bit corresponding to the register dig_clk_cfg0 and the gpdac_mode bit corresponding to the register gpdac_config according to the requirements
3. Initialize the GPIO pins of the A channel
4. Initialize and enable the DAC A channel
5. Initialize and enable the DMA channel: set the DMA transfer data width, source address, destination address and data transfer length, etc.
6. Enable DAC DMA mode: write 1 to the corresponding bit value of gpdac_dma_tx_en in register gpdac_dma_config
7. Write the data to be converted into the register gpdac_dma_wdata, and act on the A or B channel according to different data formats to complete the data conversion

.. only:: html

   .. include:: dac_register.rst

.. raw:: latex

   \input{../../en/content/dac}