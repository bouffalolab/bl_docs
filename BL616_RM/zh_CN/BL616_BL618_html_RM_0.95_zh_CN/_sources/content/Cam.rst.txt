==========
CAM
==========

简介
=====
CAM(Camera)模块负责将并行接口(DVP)转换成AHB接口，把图像传感器生成的像素数据写入系统内存中，作为后续影像传输或压缩使用。CAM模块拥有灵活的输出格式配置，可以满足多种多样的图像处理需求。

.. figure:: ../../picture/CamArch.svg
   :align: center

   Cam框图

主要特征
=========

- 并行接口8-bitDVP信号，高速数据传输(80M)，可配置DVP信号有效水平与逻辑组合
- 支持8-bit/16-bit/24-bit输入像素位宽
- 支持将RGB888输入格式转为RGB565或RGBA8888输出
- 支持视频模式和照片模式
- 可配置丢弃模式，包括：

  * 丢弃奇数位数据
  * 丢弃偶数位数据
  * 丢弃奇数行的奇数位数据
  * 丢弃奇数行的偶数位数据

- 可配置的图像传感器行帧同步信号选择和极性选择
- 支持图像矩形裁剪
- 以1~32为周期的帧取舍功能
- 支持行帧同步信号的完整性检测
- AHB总线通信接口
- 512字节缓存FIFO以应对总线偶而忙碌的状态
- 连续缓存多达4组图像信息
- 多种应用中断，有利于弹性使用与出错提示

功能描述
=========
DVP(Digital Video Port)信号与配置
------------------------------------------
DVP（Digital Video Port）是并行接口，主要有时钟，帧同步，行同步与8-bit数据管脚，时钟的极限限制在80MHz，所以一般用于5MP以下分辨率Sensor。芯片内可独立配置帧同步与行同步的有效电平，并在有效数据上提供四种模式: 

A.	帧同步与行同步同时有效(“&”逻辑)

B.	帧同步或行同步择一有效(“|”逻辑)

C.	帧同步有效

D.	行同步有效

YCbCr格式
------------
亮度信号被称为Y，色度信号是由两个互相独立的信号组成。视颜色系统和格式不同，两种色度信号经常被称为U、V或Pb、Pr或Cb、Cr。这是由不同的编码格式产生的，但实际上它们的概念基本相同。

由于人类视网膜上识别亮度的视网膜杆细胞要多于识别色度的视网膜锥细胞，人眼对亮度的敏感程度要高于对色度的敏感程度。所以可以将色度信息丢弃一部分而不被人眼所察觉。

色度信号分辨率最高的格式是4:4:4，即每4点Y采样对应了4点Cb和4点Cr采样。而4:2:2是每4点Y采样对应了2点Cb和2点Cr采样，在这种格式中，色度信号的扫描线数量和亮度信号一样多，但是每条扫描线上的色度采样点却只有亮度信号的一半。与上面提到的格式不同，4:2:0并不是每4点Y采样对应2点Cb和0点Cr采样，而是每4点Y采样对应1点Cb和1点Cr采样。4:0:0是丢弃所有的色度信息，即灰度图。

视频模式/照片模式
---------------------
照片模式下当软件给的固定大小的存储器被写满时，CAM会停止，需要软件进行POP操作将空间空出后才会继续写入。

视频模式下会在软件给的固定大小的存储器上不停地复写，也就是将内存当作ring buffer的概念，无需软件进行POP操作，使用上要确保图像被实时取出或是跟着MJPEG模块做连动。

RGB888转RGB565/RGBA8888输出
----------------------------------
对于输入格式为RGB888的图像数据，可以选择转为RGB565或RGBA8888写入到内存中。如果转为RGB565格式，则R、G、B的排列顺序可以通过寄存器MISC的位FORMAT_565进行控制，不同的值对应的排列顺序如下所示：

 - 0：byte2[7:3]，byte1[7:2]，byte0[7:3]
 - 1：byte1[7:3]，byte2[7:2]，byte0[7:3]
 - 2：byte2[7:3]，byte0[7:2]，byte1[7:3]
 - 3：byte0[7:3]，byte2[7:2]，byte1[7:3]
 - 4：byte1[7:3]，byte0[7:2]，byte2[7:3]
 - 5：byte0[7:3]，byte1[7:2]，byte2[7:3]

如果转为RGBA8888格式，则A的值与寄存器MISC的位ALPHA中填入的值一致。

图像矩形裁剪
---------------
通过寄存器HSYNC_CONTROL和VSYNC_CONTROL的高16位和低16位分别设置行同步信号和帧同步信号裁剪的起始和结束位置，就可以将指定位置和大小的矩形窗口内的图像裁剪下来，超出矩形部分的数据会被丢弃。其中行同步信号起始和结束设置的是像素序号,帧同步信号起始和结束设置的是行号，裁剪后的图像包含起始点而不包含结束点。

帧取舍功能
---------------
可以通过寄存器FRAME_PERIOD设置一个帧周期n，n的取值范围是0~31，对应的实际值是n+1，然后通过寄存器FRAME_VLD设置在一个帧周期中保留哪几帧图像。需要保留的在对应的bit位置写1，需要舍弃的在对应的bit位置写0。比如n设为5，FRAME_VLD的值设为0x13，则每6帧图像中，第1、2、5帧图像会写入内存中，而第3、4、6帧图像会被舍弃，以6帧为周期进行循环。

行帧同步信号完整性检测
-------------------------
通过寄存器FRAME_SIZE_CONTROL的低16位和高16位可以分别设置行同步信号比较值和帧同步信号比较值，可以对信号的完整性进行检测。其中行同步信号设置的是每行的总像素数，帧同步信号设置的是总行数。当一帧图像的行或帧同步信号计数值与比较值不相等时，会有对应的中断产生。

缓存图像信息
-------------
模块内部包含4组FIFO记录图像地址和图像ID。每当此模块完整写入一帧到内存，便会将此帧图像的起始地址和图像ID纪录于此FIFO中，但要注意的是当发生内存剩余不足，或是4组FIFO满存的状况时，模块会自动丢掉接下来图像的讯息，在图像信息取出的部分，可通过pop操作将最旧的图像信息空出，此时FIFO会自动推进，保证FIFO内部图像信息的时序，如下图 :

.. figure:: ../../picture/CamFrameFIFO.svg
   :align: center

   FIFO框架

支持多种中断信息(可独立开关配置)
-------------------------------------
- Normal 中断
  * 可设定一个计数值n，每当写入n张图像后就会触发一次中断

- Memory 中断
  * 当内存剩余空间不足一帧大小，已经使用的内存被复写时，触发中断，如下图所示：

.. figure:: ../../picture/CamMem.svg
   :align: center

   内存

- Frame 中断
  * 当未处理的图像超过4组，无法再存储更多的图像信息时，触发中断

- FIFO 中断
  * 当总线来不及写入内存，导致FIFO溢出时，触发中断

- Hsync 中断
  * 当一帧图像中某行的像素点数与设置值不相等（行同步信号完整性检测不通过）时，触发中断

- Vsync 中断
  * 当一帧图像的总行数与设置值不相等（帧同步信号完整性检测不通过）时，发出中断

.. only:: html

   .. include:: cam_register.rst

.. raw:: latex

   \input{../../zh_CN/content/cam}