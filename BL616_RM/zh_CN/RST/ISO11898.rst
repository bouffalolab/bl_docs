========
ISO11898
========

简介
=====
ISO11898是由以研发和生产汽车电子产品著称的德国BOSCH公司开发的，是国际上应用最广泛的现场总线之一。

主要特征
=========

- 支持1Mbps和自定义位速率

- 支持ISO11898协议2.0A和2.0B

- 支持自测模式（自发自收）

- 支持帧过滤

- 支持静默模式（不应答，没有有效的错误标志）

- 支持不重发的单次传输

- 支持查询仲裁失败的bit位

- 任何总线错误都可以触发中断



功能介绍
=========
发送缓冲区（TXB）
-----------------
发送缓冲区是CPU和位流处理器之间的接口，能够存储完整的消息，以便通过ISO11898网络传输。缓冲区长度为13字节，由CPU写入，由位流处理器读取。

接收缓冲区（RXB， RXFIFO）
--------------------------
接收缓冲区是接收滤波器和CPU之间的接口，用于储存从ISO11898总线接收并且经过滤波的消息。接收缓冲区（RXB）表示接收FIFO（RXFIFO）中可由CPU访问的13字节窗口，其总长度为64字节。
接收FIFO使得CPU可以在处理一帧消息的同时接收其他消息。

接收过滤器 （ACF）
------------------
接收过滤器将收到的标识符和接收过滤寄存器中的内容进行比较，并决定是否应该接受此消息。如果接受此消息，则将完整的消息储存在RXFIFO中。

位流处理器 （BSP）
------------------
位流处理器是一个序列发生器，用于处理发送缓冲区、接收缓冲区和ISO11898总线之间的数据。它还在ISO11898总线上执行错误侦测、仲裁、位填充和错误处理。

位时序逻辑 （BTL）
------------------
位时序逻辑监控串行ISO11898总线并处理与总线相关的位时序。它在消息开始时总线由"隐形到显性"的转换时进行位同步（硬同步），也在后续的消息接收期间再次进行位同步（软同步）。BTL还提供可编程的时间段用来补偿传播延时与相移（例如由于振荡器漂移），并可定义采样点和在一个位时间内的采样次数。

错误管理逻辑 （EML）
--------------------
错误管理逻辑负责传输层模块的错误界定。它从BSP接收错误声明然后将错误的统计信息通知给BSP和IML（中断管理逻辑）



功能描述
=========
模式
-----
自测模式
^^^^^^^^^
通过对MOD寄存器的STM位置'1'来选择自测模式。在这种模式下，可以使用接收请求命令在总线上无其他活跃节点的情况下进行全节点测试，并且即使没有收到应答ISO11898控制器也将执行成功的传输。

静默模式
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
通过对MOD寄存器的LOM位置'1'来选择进入静默模式。在这种模式下，ISO11898控制器即使成功收到消息也不会对ISO11898总线做出应答，并且错误计数器也会停留在当前值。这种操作模式会强制ISO11898控制器成为被动错误，此时也不可以传输消息。在软件驱动的位速率检测和热插拔等场景中可以使用这种静默模式，其他所有功能都可以和正常模式一样使用。

复位模式
^^^^^^^^^
MOD寄存器中的RM位一旦由'0'变成'1'，将导致当前的发送和接收消息都被终止并进入复位模式。当RM位从'1'到'0'转变时，ISO11898控制器将返回到操作模式。

在不同模式下的不同操作含义如下表所示。

+---------+-----------------------------------+-----------------------------------+-------------------------------+
| ADDRESS |                            OPERATING MODE                             |           RESET MODE          |
|         +-----------------------------------+-----------------------------------+---------------+---------------+
| OFFSET  |                 READ              |                WRITE              | READ          | WRITE         |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x00   | mode                              | mode                              | mode          | mode          |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x04   | (00H)                             | command                           |(00H)          | command       |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x08   | status                            | reserved                          | status        | reserved      |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x0C   | interrupt                         | reserved                          |interrupt      | reserved      |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x10   | interrupt enable                  | interrupt enable                  | interrupt     | interrupt     |
|         |                                   |                                   | enable        | enable        |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x14   | reserved                          | reserved                          | reserved      | reserved      |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x18   | bus timing 0                      | reserved                          | bus timing 0  | bus timing 0  |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x1C   | bus timing 1                      | reserved                          | bus timing 1  | bus timing 1  |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x20   | reserved                          | reserved                          |  reserved     | reserved      |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x24   | reserved                          | reserved                          |  reserved     | reserved      |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x28   | reserved                          | reserved                          |  reserved     | reserved      |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x2C   | arbitration lost capture          | reserved                          | arbitration   | reserved      |
|         |                                   |                                   | lost capture  |               |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x30   | error code capture                | reserved                          | error code    | reserved      |
|         |                                   |                                   | capture       |               |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x34   | error warning limit               | reserved                          | error warning | error warning |
|         |                                   |                                   | limit         | limit         |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x38   | RX error counter                  | reserved                          | RX error      | RX error      |
|         |                                   |                                   | counter       | counter       |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x3C   | TX error counter                  | reserved                          | TX error      | TX error      |
|         |                                   |                                   | counter       | counter       |
+---------+-----------------+-----------------+-----------------+-----------------+---------------+---------------+
|  0x40   | SFF RX frame    | EFF RX frame    | SFF TX frame    | EFF TX frame    | acceptance    | acceptance    |
|         | information     | information     | information     | information     | code 0        | code 0        |
+---------+-----------------+-----------------+-----------------+-----------------+---------------+---------------+
|  0x44   | RX identifier 1 | RX identifier 1 | TX identifier 1 | TX identifier 1 | acceptance    | acceptance    |
|         |                 |                 |                 |                 | code 1        | code 1        |
+---------+-----------------+-----------------+-----------------+-----------------+---------------+---------------+
|  0x48   | RX identifier 2 | RX identifier 2 | TX identifier 2 | TX identifier 2 | acceptance    | acceptance    |
|         |                 |                 |                 |                 | code 2        | code 2        |
+---------+-----------------+-----------------+-----------------+-----------------+---------------+---------------+
|  0x4C   | RX data 1       | RX identifier 3 | TX data 1       | TX identifier 3 | acceptance    | acceptance    |
|         |                 |                 |                 |                 | code 3        | code 3        |
+---------+-----------------+-----------------+-----------------+-----------------+---------------+---------------+
|  0x50   | RX data 2       | RX identifier 4 | TX data 2       | TX identifier 4 | acceptance    | acceptance    |
|         |                 |                 |                 |                 | mask 0        | mask 0        |
+---------+-----------------+-----------------+-----------------+-----------------+---------------+---------------+
|  0x54   | RX data 3       | RX data 1       | TX data 3       | TX data 1       | acceptance    | acceptance    |
|         |                 |                 |                 |                 | mask 1        | mask 1        |
+---------+-----------------+-----------------+-----------------+-----------------+---------------+---------------+
|  0x58   | RX data 4       | RX data 2       | TX data 4       | TX data 2       | acceptance    | acceptance    |
|         |                 |                 |                 |                 | mask 2        | mask 2        |
+---------+-----------------+-----------------+-----------------+-----------------+---------------+---------------+
|  0x5C   | RX data 5       | RX data 3       | TX data 5       | TX data 3       | acceptance    | acceptance    |
|         |                 |                 |                 |                 | mask 3        | mask 3        |
+---------+-----------------+-----------------+-----------------+-----------------+---------------+---------------+
|  0x60   | RX data 6       | RX data 4       | TX data 6       | TX data 4       | reserved      | reserved      |
+---------+-----------------+-----------------+-----------------+-----------------+---------------+---------------+
|  0x64   | RX data 7       | RX data 5       | TX data 7       | TX data 5       | reserved      | reserved      |
+---------+-----------------+-----------------+-----------------+-----------------+---------------+---------------+
|  0x68   | RX data 8       | RX data 6       | TX data 8       | TX data 6       | reserved      | reserved      |
+---------+-----------------+-----------------+-----------------+-----------------+---------------+---------------+
|  0x6C   | (FIFO RAM)      | RX data 7       | reserved        | TX data 7       | reserved      | reserved      |
+---------+-----------------+-----------------+-----------------+-----------------+---------------+---------------+
|  0x70   | (FIFO RAM)      | RX data 8       | reserved        | TX data 8       | reserved      | reserved      |
+---------+-----------------+-----------------+-----------------+-----------------+---------------+---------------+
|  0x74   | RX message counter                | reserved                          | RX message    | reserved      |
|         |                                   |                                   | counter       |               |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x78   | RX buffer start address           | reserved                          | RX buffer     | RX buffer     |
|         |                                   |                                   | start address | start address |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+
|  0x7C   | clock divider                     | clock divider                     | clock divider | clock divider |
+---------+-----------------------------------+-----------------------------------+---------------+---------------+

发送处理
---------
发送流程
^^^^^^^^^
1. 检查SR寄存器的TBS位来确保发送缓冲区是空的。
2. 配置帧信息、ID号和数据。
3. 通过置位CMR寄存器中的TR位来请求发送。

终止发送
^^^^^^^^^
当CPU要求暂停先前的发送时，可以使用终止发送的功能，例如需要先发送更紧急的消息。已经在发送过程中的消息不受此功能影响不会停止。为了查看之前的消息是否发送成功，应该检查SR寄存器中的发送完成标志位（TCS）。应用软件可以通过对CMR寄存器中的AT位置'1'来使用该功能，这应该在SR寄存器中的TBS位为'1'或者发送中断产生后执行。

有一点需要注意的是，即使消息被终止，也会产生发送中断，因为发送缓冲区的状态位已经指示为“已释放”状态。

自发自收
^^^^^^^^^
应用软件可以通过置位CMR寄存器中的SRR位实现自发自收，此时发送和接收是同步进行的。其他操作与普通发送流程一样。

注意点
^^^^^^^
1. 如果同时置位CMA寄存器中的TR和AT位，消息将会只发送一次。此时即使出现错误事件或者仲裁失败也不会再次发送。
2. 如果同时置位CMA寄存器中的SRR和AT位，消息将使用自发自收的方式只发送一次。此时即使出现错误事件或者仲裁失败也不会再次发送。
3. 如果同时置位CMA寄存器中的SRR、TR和AT位，消息将以同时置位TR和AT位的方式发送。
4. 一旦状态寄存器中的发送状态位被置位，内部的发送请求位就被自动清零。
5. 如果CMA寄存器中的TR和SRR被同时置位，SRR位将被忽略。

接收处理
---------
接收流程
^^^^^^^^^
接收到的消息被储存在64字节深度的内部FIFO中，FIFO完全由硬件管理，从而节省了CPU的处理负荷，简化了软件并保证了数据的一致性。应用程序可以通过FIFO的输出接口来读取收到的消息。当SR寄存器中的RBS置位时，RXFIFO中则有一帧或多帧消息可读，软件获取消息后，将CMR寄存器中的RRB置位可释放当前消息占用的RXFIFO。

消息数量
^^^^^^^^^
RMC寄存器表示RXFIFO中的可读消息的数量，该值随每一次的接收事件递增，并随每一次的释放缓冲区递减。复位后该值是0。

接收缓冲区
^^^^^^^^^^^
RBSA寄存器表示当前内部RAM中储存的接收到的消息的第一个字节的地址，其映射到接收缓冲区窗口。借助该信息可以解读内部RAM中的内容。这部分的内部RAM区域可以由CPU进行读取和写入（仅在复位模式下可写入）。

**示例**：如果RBSA的值为18H，则接收缓冲区窗口（偏移地址为10H到12H）的当前可读消息也被存储在RAM地址从18H开始的位置。由于RAM地址是直接映射到ISO11898偏移地址20H（对应RAM地址0H）开始的位置，所以消息也可以从ISO11898偏移地址38H和后面的字节中读出。（ISO11898地址 = RBSA + 20H = 18H + 20H = 38H）。如果消息地址超过RAM地址3FH则它将从RAM地址0继续。

当FIFO中至少还有一条消息时，应该发出释放接收缓冲区的命令，此时RBSA就被更新到下一条消息的开始位置。

在硬件复位时，RBSA寄存器的值被初始化为‘00H’，在软件复位（设置为复位模式）时该寄存器值不会变化，但FIFO被清除，这意味着RAM内容不会改变，但是下一个接收（或发送）的消息将覆盖接收缓冲区窗口中的可见消息。

标识符过滤
-----------
在接收过滤器的协助下，只有当接收到的消息的标识符位与接收过滤器寄存器中的预定义位相同时，ISO11898 控制器才能允许将接收到的消息传递到 RXFIFO。接收过滤器由接收码寄存器（ACRn）和接收屏蔽寄存器（AMRn）组成。可被接收的消息中的匹配位的值由接收码寄存器设定，哪些位可以屏蔽由接收屏蔽寄存器设定。

有两种不同的滤波模式可以选择（MOD寄存器中的AFM位设定）:

- 单滤波器模式 (AFM = 1).
- 双滤波器模式 (AFM = 0).

单滤波器配置
^^^^^^^^^^^^^
在这种配置中，可以定义一个长达4字节的滤波器。过滤字节和消息字节之间的位对应关系取决于当前接收的帧格式。

**标准帧**：如果接收到标准帧格式的消息，包括RTR位和前两个数据字节在内的完整标识符用于接受过滤。如果由于设置了RTR位而没有数据字节存在，或者由于设定了相应的数据长度而没有数据字节或只有一个数据字节，也可以接收到消息。

所有滤波位之间是逻辑与的关系，必须所有位都通过滤波器，一条消息才能被接收到。请注意AMR1和ACR1的低4位没有使用，为了与将来产品兼容这几位应该被设置为屏蔽位，即AMR1的3~0位都为1。

.. figure:: ../../picture/ISO11898FilterSingleStandard.svg
   :align: center

**扩展帧**:如果接收到扩展帧格式的消息，包括RTR位在内的完整标识符用于接受过滤。

所有滤波位之间是逻辑与的关系，必须所有位都通过滤波器，一条消息才能被接收到。请注意AMR3和ACR3的低2位没有使用，为了与将来产品兼容这几位应该被设置为屏蔽位，即AMR3的1~0位都为1。

.. figure:: ../../picture/ISO11898FilterSingleExtended.svg
   :align: center

双滤波器配置
^^^^^^^^^^^^^
可以在这种配置中定义两个短滤波器，收到的消息会与这两个滤波器都进行比较，以决定是否将该消息复制到接收缓冲区。只要有一个滤波器接收该消息，则收到的消息就是有效的。过滤字节和消息字节之间的位对应关系取决于当前接收的帧格式。

**标准帧**：如果接收到标准帧格式的消息，则定义的这两个滤波器看起来有点不一样，第一个滤波器比较包括RTR和第一个数据字节在内的完整的标识符，第二个滤波器则只比较包括RTR位在内的标准标识符。

为了成功接收消息，至少一个完整过滤器的所有单个位比较都表示接受。在RTR被置位或者数据长度为0的情况下是没有数据的。然而，如果直到RTR位之前的第一部分都表示接受，则消息也是可以通过滤波器1的。

如果第一个滤波器不需要过滤数据字节，则AMR1和AMR3的低4位必须设置为逻辑1（无关紧要），然后这两个滤波器使用包括RTR在内的标准标识符一样地运行。

.. figure:: ../../picture/ISO11898FilterDualStandard.svg
   :align: center

**扩展帧**：如果接收到扩展帧格式的消息，则定义的这两个滤波器看起来是一样的。这两个滤波器都只比较扩展标识符的前两个字节。

至少一个完整的滤波器的所有单个位比较都表明接受，消息才能被成功接收。

.. figure:: ../../picture/ISO11898FilterDualExtended.svg
   :align: center



出错管理
---------
仲裁失败
^^^^^^^^^
仲裁失败捕获寄存器（ALC）包含仲裁失败的位置，该寄存器只能被CPU读取不能写入。如果使能了仲裁失败的中断，则一旦仲裁失败将产生中断。同时，位流处理器中的当前位的位置将被捕获到ALC中。在用户软件读取ALC的内容之前，该寄存器的值将一直固定不变。读取该寄存器值后，捕获机制就会再次激活。在中断寄存器被读出的时候，相应的中断标志也是被清除的，在中断失败寄存器被读出之前是不会再次产生仲裁失败中断的。

.. figure:: ../../picture/ISO11898ArbitrationLostBitNumberInterpretation.svg
   :align: center

.. figure:: ../../picture/ISO11898ExampleOfArbitrationLost.svg
   :align: center

+-----------------------------+-------+----------------------------------------+
|             BITS            |DECIMAL|                                        |
+-----+-----+-----+-----+-----+       |                FUNCTION                |
|ALC.4|ALC.3|ALC.2|ALC.1|ALC.0|VALUE  |                                        |
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  0  |  0  |  0  |  0  |  00   |arbitration lost in bit 1 of identifier |
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  0  |  0  |  0  |  1  |  01   |arbitration lost in bit 2 of identifier |
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  0  |  0  |  1  |  0  |  02   |arbitration lost in bit 3 of identifier |
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  0  |  0  |  1  |  1  |  03   |arbitration lost in bit 4 of identifier |
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  0  |  1  |  0  |  0  |  04   |arbitration lost in bit 5 of identifier |
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  0  |  1  |  0  |  1  |  05   |arbitration lost in bit 6 of identifier |
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  0  |  1  |  1  |  0  |  06   |arbitration lost in bit 7 of identifier |
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  0  |  1  |  1  |  1  |  07   |arbitration lost in bit 8 of identifier |
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  1  |  0  |  0  |  0  |  08   |arbitration lost in bit 9 of identifier |
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  1  |  0  |  0  |  1  |  09   |arbitration lost in bit 10 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  1  |  0  |  1  |  0  |  10   |arbitration lost in bit 11 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  1  |  0  |  1  |  1  |  11   |arbitration lost in bit SRTR            |
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  1  |  1  |  0  |  0  |  12   |arbitration lost in bit IDE             |
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  1  |  1  |  0  |  1  |  13   |arbitration lost in bit 12 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  1  |  1  |  1  |  0  |  14   |arbitration lost in bit 13 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  1  |  1  |  1  |  1  |  15   |arbitration lost in bit 14 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  1  |  0  |  0  |  0  |  0  |  16   |arbitration lost in bit 15 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  1  |  0  |  0  |  0  |  1  |  17   |arbitration lost in bit 16 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  1  |  0  |  0  |  1  |  0  |  18   |arbitration lost in bit 17 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  1  |  0  |  0  |  1  |  1  |  19   |arbitration lost in bit 18 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  1  |  0  |  1  |  0  |  0  |  20   |arbitration lost in bit 19 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  1  |  0  |  1  |  0  |  1  |  21   |arbitration lost in bit 20 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  1  |  0  |  1  |  1  |  0  |  22   |arbitration lost in bit 21 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  1  |  0  |  1  |  1  |  1  |  23   |arbitration lost in bit 22 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  1  |  1  |  0  |  0  |  0  |  24   |arbitration lost in bit 23 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  1  |  1  |  0  |  0  |  1  |  25   |arbitration lost in bit 24 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  1  |  1  |  0  |  1  |  0  |  26   |arbitration lost in bit 25 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  1  |  1  |  0  |  1  |  1  |  27   |arbitration lost in bit 26 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  0  |  1  |  1  |  0  |  0  |  28   |arbitration lost in bit 27 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  1  |  1  |  1  |  0  |  1  |  29   |arbitration lost in bit 28 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  1  |  1  |  1  |  1  |  0  |  30   |arbitration lost in bit 29 of identifier|
+-----+-----+-----+-----+-----+-------+----------------------------------------+
|  1  |  1  |  1  |  1  |  1  |  31   |arbitration lost in bit RTR             |
+-----+-----+-----+-----+-----+-------+----------------------------------------+

错误捕获
^^^^^^^^^
错误捕获寄存器（ECC）包含总线错误的类型和位置，该寄存器只能被CPU读取不能写入。如果是能了总线错误中断，则一旦总线发生错误将产生总线错误中断。同时，位流处理器中的当前位的位置将被捕获到ECC中。在用户软件读取ECC的内容之前，该寄存器的值将一直固定不变。读取该寄存器值后，捕获机制就会再次激活。对中断寄存器中相应位的读取操作会清除该位，在读取捕获寄存器之前，不会再次产生总线错误中断。

错误捕获寄存器中值代表的错误类型和种类如下所示。

+-----------+-----------+--------------------+
| BIT ECC.7 | BIT ECC.6 |     FUNCTION       |
+-----------+-----------+--------------------+
|     0     |     0     | bit error          |
+-----------+-----------+--------------------+
|     0     |     1     |form error          |
+-----------+-----------+--------------------+
|     1     |     0     |stuff error         |
+-----------+-----------+--------------------+
|     1     |     1     |other type of error |
+-----------+-----------+--------------------+

+-----------+-----------+-----------+-----------+-----------+----------------------+
| BIT ECC.4 | BIT ECC.3 | BIT ECC.2 | BIT ECC.1 | BIT ECC.0 |       FUNCTION       |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     0     |     0     |     0     |     1     |     1     |start of frame        |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     0     |     0     |     0     |     1     |     0     |ID.28 to ID.21        |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     0     |     0     |     1     |     1     |     0     |ID.20 to ID.18        |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     0     |     0     |     1     |     0     |     0     |bit SRTR              |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     0     |     0     |     1     |     0     |     1     |bit IDE               |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     0     |     0     |     1     |     1     |     1     |ID.17 to ID.13        |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     0     |     1     |     1     |     1     |     1     |ID.12 to ID.5         |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     0     |     1     |     1     |     1     |     0     |ID.4 to ID.0          |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     0     |     1     |     1     |     0     |     0     |bit RTR               |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     0     |     1     |     1     |     0     |     1     |reserved bit 1        |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     0     |     1     |     0     |     0     |     1     |reserved bit 0        |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     0     |     1     |     0     |     1     |     1     |data length code      |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     0     |     1     |     0     |     1     |     0     |data field            |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     0     |     1     |     0     |     0     |     0     |CRC sequence          |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     1     |     1     |     0     |     0     |     0     |CRC delimiter         |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     1     |     1     |     0     |     0     |     1     |acknowledge slot      |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     1     |     1     |     0     |     1     |     1     |acknowledge delimiter |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     1     |     1     |     0     |     1     |     0     |end of frame          |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     1     |     0     |     0     |     1     |     0     |intermission          |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     1     |     0     |     0     |     0     |     1     |active error flag     |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     1     |     0     |     1     |     1     |     0     |passive error flag    |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     1     |     0     |     0     |     1     |     1     |tolerate dominant bits|
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     1     |     0     |     1     |     1     |     1     |error delimiter       |
+-----------+-----------+-----------+-----------+-----------+----------------------+
|     1     |     1     |     1     |     0     |     0     |overload flag         |
+-----------+-----------+-----------+-----------+-----------+----------------------+

接收错误计数器（RXERR）
^^^^^^^^^^^^^^^^^^^^^^^
接收错误计数寄存器的值代表当前接收错误的数量，在硬件复位后该寄存器被初始化为逻辑0。在操作模式下该寄存器只能被CPU执行读取操作，对该寄存器的写操作只能在复位模式下执行。如果发生总线关闭事件，RXERR被设置为逻辑0。此时，总线处于关闭状态，对该寄存器的写操作不起作用。

需要注意的是，只有先进入复位模式，CPU才可以对RXERR的值进行修改，在这样的情况下，错误状态可能会改变，错误警告中断和错误被动中断不会发生，除非再取消复位模式。

发送错误计数器（TXERR）
^^^^^^^^^^^^^^^^^^^^^^^
发送错误计数寄存器的值代表当前发送错误的数量，在操作模式下该寄存器只能被CPU执行读取操作，对该寄存器的写操作只能在复位模式下执行。在硬件复位后该寄存器的值被初始化为逻辑0。如果发生总线关闭事件，TXERR值就被设定为127，这样就可以计算协议定义的最短时间（出现128次总线空闲信号）。在此期间读取该寄存器的值可以获取总线关闭恢复的状态信息。如果总线处于关闭状态，则对TXERR的范围从0到254的写操作会清除总线关闭状态标志，并且控制器将在清除复位模式后等待11个连续隐形位（总线空闲）出现一次。

通过CPU将255写入TXERR将产生总线关闭事件，需要注意的是只有先进入复位模式才可以进行CPU强制修改该寄存器值的操作，这样的情况下，错误状态或者总线状态将可能改变，错误警告中断或错误被动中断不会受新值影响，除非再退出复位模式。退出复位模式后，TXERR的值还好像和发生总线错误导致总线关闭那样一样的机制运行，这意味着会再次进入复位模式，TXERR的值又被初始化为127，RXERR的值被初始化为0，并且相关的状态和中断寄存器都被重新设置。此时退出复位模式将执行协议定义的总线关闭恢复流程（等待128个总线空闲信号的发生）。如果在总线关闭并恢复前（TXERR>0）再次进入复位模式，总线将继续保持关闭状态并且TXERR的值被冻结。

错误限值设定
^^^^^^^^^^^^^
错误警告限制可以由EWLR寄存器设定，该寄存器默认值（硬件复位后）是96。在复位模式下，这个寄存器可被CPU读取或写入，在操作模式下，该寄存器只能被读取。当RXERR和TXERR两个错误计数值至少一个大于等于EWLR寄存器设定的值时，SR寄存器中的ES位将被置位，否者被清零，此时如果IER寄存器中的EIE位被置位，则将产生错误警告中断。需要注意的是该寄存器只有在先进入复位模式后才能才操作。对该寄存器的操作可能会引起错误状态的改变，并且不会让错误警告中断产生，除非再退出复位模式。

位时序
-------
时序图如下:

.. figure:: ../../picture/ISO11898Timing.svg
   :align: center

波特率分频器（BRP）
^^^^^^^^^^^^^^^^^^^
ISO11898系统时钟tscl的周期是可以设定的，并且这确定了各个位的时序。ISO11898系统时钟的计算公式如下：

tscl = 2 * tCLK * (32 * BRP.5 + 16 * BRP.4 + 8 * BRP.3 + 4 * BRP.2 + 2 * BRP.1 + BRP.0 + 1)

同步跳转宽度（SJW）
^^^^^^^^^^^^^^^^^^^
为了补偿不同总线控制器的时钟振荡器之间的相移，任何总线控制器都必须在当前传输的任何相关信号边缘重新同步。 同步跳转宽度定义了一个位周期可以通过一次重新同步缩短或延长的最大时钟周期数：

tSJW = tscl * (2 * SJW.1 + SJW.0 + 1) 

采样（SAM）
^^^^^^^^^^^
当BTR1寄存器中的SAM位为1时，总线将采样三次，这种模式推荐在中低速总线中使用，此时总线中的滤波器将有好处。如果SAM位为0，则总线只采样一次，这种模式推荐在高速模式中使用。

时间段（TSEG）
^^^^^^^^^^^^^^
TSEG包含BTR1寄存器中TSEG1和TSEG2两部分，它决定了每一个位的时钟数和采样点位置，计算公式如下：

tSYNCSEG = 1 * tscl

tTSEG1 = tscl * (8 * TSEG1.3 + 4 * TSEG1.2 + 2 * TSEG1.1 + TSEG1.0 + 1)

tTSEG2 = tscl * (4 * TSEG2.2 + 2 * TSEG2.1 + TSEG2.0 + 1)








