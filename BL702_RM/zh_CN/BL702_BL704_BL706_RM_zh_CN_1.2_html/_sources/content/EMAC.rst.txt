===========
Emac
===========

简介
=====
EMAC模块是一个兼容 IEEE 802.3 的10/100Mbps 以太网MAC(Ethernet Media Access Controller)。
其包含状态及控制寄存器组，收发模块，收发缓冲描述符组，主机接口，MDIO，物理层芯片(PHY)接口。

状态及控制寄存器组包含了EMAC的状态位及控制位，是与用户程序的接口，负责控制数据收发，并汇报状态。

收发模块负责根据收发描述符内的控制字，从指定内存位置取得数据帧，添加前导，CRC，并扩充短的帧后通过PHY发出；
或是从PHY接收数据，并根据收发缓冲描述符，将数据放入指定内存。收发完成后配置相关的事件标志。如果使能了事件中断，
将通过中断请求到主机进行处理。

MDIO及MII/RMII接口负责与PHY进行通信，包括读写PHY的寄存器，以及数据包的收发。

主要特征
=========
- 兼容 IEEE 802.3 定义的MAC层功能
- 支持 IEEE 802.3 定义的MII、RMII接口的PHY
- 通过MDIO与PHY交互
- 支持10Mbps与100Mbps以太网
- 支持半双工与全双工
- 在全双工模式下，支持自动流控及生成控制帧
- 在半双工模式下，支持碰撞检测及重传
- 支持CRC的生成及校验
- 数据帧前导生成及移除
- 发送时，自动扩展短的数据帧
- 检测过长或过短的数据帧(长度限制)
- 可传输长数据帧(> 标准以太帧长度)
- 自动丢弃重发次数超限或帧间隙过小的包
- 广播包过滤
- 用于保存多达128个BD(Buffer Descriptor)的内部RAM
- 发送/接收的各种事件标志
- 在事件发生时产生对应中断

功能描述
===========
EMAC模块的组成如下图。

.. figure:: ../../picture/EMAC.svg
   :align: center
   :scale: 80%

   EMAC框图

模块的控制寄存器通过MDIO，可以读写PHY的寄存器从而实现配置、选择模式(半/全双工)、发起协商等操作。
接收模块过滤并检查收到的数据帧：是否有合法的前导，FCS，长度等，并根据描述符，将数据帧存放到指定缓冲地址。
发送模块根据数据缓冲描述符，从内存中取得数据，添加前导，FCS，pad等，然后根据CSMA/CD协议，将数据发出。
如果检测到CRS，将会延迟重试。
收发缓冲描述符组连接到外部的RAM，此RAM用于保存发送和接收的以太网数据帧。每个描述符包含相应的控制状态字以及对应的
缓冲内存地址。描述符一共有128组，可以灵活分配，用于发送或者接收。

时钟
============
EMAC模块需要一路时钟用于同步收发(100Mbps时，25MHz(MII)或50MHz(RMII)；10Mbps时，2.5MHz)。
此时钟必须在EMAC与PHY之间同步。

收发缓冲描述符(BD, Buffer Descriptor)
==========================================
收发缓冲描述符，用于提供EAMC与数据帧缓存地址信息之间的关联，对收发数据帧进行控制，以及提供收发状态提示。
每个描述符由两个连续的word(32bit)构成，低地址的word提供了本buffer包含的数据帧的长度，控制及状态位；高地址的word是内存指针。
具体的BD描述可以参考寄存器描述章节。
需要注意的是：对于BD，需要按word写入。
EMAC模块支持128个BD，由发送/接收逻辑共享，可自由组合。但发送BD总是占据前面的连续区域(个数由MAC_TX_BD_NUM寄存器中的TXBDNUM域来指定)。
EMAC按照BD的顺序，循环处理发送/接收BD，直到遇到标记为WR的BD就回绕到发送/接收各自的首个BD。

PHY交互
============
PHY交互寄存器组提供了PHY交互需要的命令及数据通信方式。EMAC通过MDIO控制PHY的工作模式，并保证两者匹配(速率，全/半双工)。
数据包通过MII/RMII接口在EMAC与PHY之间交互，可以通过EMAC的模式寄存器(EMAC_MODE)中的RMII_EN选择。当此bit为1，则选择RMII模式，否则就是MII模式。
MII及RMII模式均支持 IEEE 802.3u 标准中指定的 10Mbps 与 100Mbps的传输速率。
MII及RMII的传输信号描述与下表。

.. table:: 传输信号 
   :widths: 25, 40, 40
   :width: 100%
   :align: center

   +----------------------+----------------------------------+----------------------------------+
   | 名称                 | MII                              | RMII                             |
   +======================+==================================+==================================+
   | EXTCK_EREFCK         | ETXCK: 发送时钟信号              | EREFCK：参考时钟                 |
   +----------------------+----------------------------------+----------------------------------+
   | ECRS                 | ECRS: 载波探测                   | \-                               |
   +----------------------+----------------------------------+----------------------------------+
   | ECOL                 | ECOL：碰撞检测                   | \-                               |
   +----------------------+----------------------------------+----------------------------------+
   | ERXDV                | ERXDV：数据valid                 | ECRSDV: 载波检测/数据valid       |
   +----------------------+----------------------------------+----------------------------------+
   | ERX0-ERX3            | ERX0-ERX3：4-bit接收数据         | ERX0-ERX1：2-bit接收数据         |
   +----------------------+----------------------------------+----------------------------------+
   | ERXER                | ERXER：接收错误指示              | ERXER：接收错误指示              |
   +----------------------+----------------------------------+----------------------------------+
   | ERXCK                | ERXCK：接收时钟信号              | \-                               |
   +----------------------+----------------------------------+----------------------------------+
   | ETXEN                | ETXEN：发送使能                  | ETXEN：发送使能                  |
   +----------------------+----------------------------------+----------------------------------+
   | ETX0-ETX3            | ETX0-ETX3：4-bit发送数据         | ETX0-ETX1：2-bit发送数据         |
   +----------------------+----------------------------------+----------------------------------+
   | ETXER                | ETXER：发送错误指示              | \-                               |
   +----------------------+----------------------------------+----------------------------------+
   | EMDC                 | MDIO Clock                       | MDIO Clock                       |
   +----------------------+----------------------------------+----------------------------------+
   | EMDIO                | MDIO Data Input Output           | MDIO Data Input Output           |
   +----------------------+----------------------------------+----------------------------------+

RMII接口引脚较少，使用2-bit数据线用于收发，在100Mbps速率时，需要提供50MHz的参考时钟。

编程流程
===========

PHY初始化
-----------
- 根据PHY类型，设置EMAC_MODE寄存器中的RMII_EN位来选择合适的连接方式
- 设置EMAC的MAC地址到EMAC_MAC_ADDR0与EMAC_MAC_ADDR1中
- 通过编程EMAC_MIIMODE寄存器中的域CLKDIV，为MDIO部分设置合适的时钟
- 设置对应PHY的地址到寄存器EMAC_MIIADDRESS的域FIAD中
- 根据PHY的手册，通过EMAC_MIICOMMAND与EMAC_MIITX_DATA寄存器发送命令
- 读取PHY的数据会保存在EMAC_MIIRX_DATA寄存器中
- 通过EMAC_MIISTATUS寄存器可以查询与PHY命令交互的状态

基础的交互完成后，应当使PHY进入自动协商状态。协商完成之后，根据协商结果编程模式到EMAC_MODE寄存器中的FULLD位。

发送数据帧
------------------
- 配置EMAC_MODE寄存器中数据帧格式、间隔等位域
- 通过配置EMAC_TX_BD_NUM寄存器中的TXBDNUM域来指定发送所使用的BD的个数，那么剩余的就是RX的BD
- 在内存中准备好需要发送的数据帧
- 将数据帧的地址填写到对应发送BD的数据指针域(word 1)中
- 清空对应发送BD的控制与状态域(wrod 0)中的状态标记，并设置控制域(CRC使能，PAD使能，中断使能等)
- 写入数据帧长度，并设置好RD域，告知EMAC此BD数据需要发送；如需要，设置上IRQ位，以使能中断
- 特别的，如果是最后一个发送的BD，需要设置上WR位，EMAC会在处理完这个BD之后"回绕"到第一个发送BD进行处理
- 如果有多个BD需要发送，则重复设置BD的步骤以填充所有的发送BD
- 如果需要使能发送中断，还需要配置EMAC_INT_MASK寄存器中的TX相关位
- 配置EMAC_MODE寄存器中的TXEN位，以使能发送
- 如果使能了中断，在发送的中断中，可用通过EMAC_TX_BD_NUM寄存器中的TXBDNUM域获取当前的BD
- 根据当前BD的状态字进行相应的处理
- 数据已被发送出去的BD，其控制域中的RD位会被硬件清零，且不会被再次发送；需要填充新数据后，置位RD，此BD即可再次用于发送

接收数据帧
--------------------
- 配置EMAC_MODE寄存器中数据帧格式、间隔等位域
- 通过配置EMAC_TX_BD_NUM寄存器中的TXBDNUM域来指定发送所使用的BD的个数，那么剩余的就是RX的BD
- 在内存中准备好接收数据的区域
- 将数据帧的地址填写到对应接收BD的数据指针域(word 1)中
- 清空对应发送BD的控制与状态域(wrod 0)中的状态标记，并设置控制域(中断使能等)
- 写入可接收的数据帧长度，并设置好E位域，告知EMAC此BD空闲，可以用于数据接收；如需要，设置上IRQ位，以使能中断
- 特别的，如果是最后一个有效接收BD，需要设置上WR位，EMAC会在处理完这个BD之后"回绕"到第一个接收BD进行处理
- 如果有多个BD可供接收数据，则重复设置BD的步骤以填充所有的BD
- 如果需要使能接收中断，还需要配置EMAC_INT_MASK寄存器中的RX相关位
- 配置EMAC_MODE寄存器中的RXEN位，以使能接收
- 如果使能了中断，在接收的中断中，可用通过EMAC_TX_BD_NUM寄存器中的RXBDNUM域获取当前的BD
- 根据当前BD的状态字进行相应的处理
- 接收完成的BD，其控制域中的E位会被硬件清零，且不会被再次用于接收；需要取走数据，置位E，此BD即可再次用于接收

.. only:: html

   .. include:: emac_register.rst

.. raw:: latex

   \input{../../zh_CN/content/emac}